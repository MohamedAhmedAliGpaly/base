{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/docs/linux/server/ftp.md","webpack:///./src/App.vue?9b05","webpack:///./src/docs/linux/ubuntu/index.md","webpack:///./src/docs/mvc/python/flask.md","webpack:///./src/docs/mvc/cpp/auto.md","webpack:///./src/docs/mvc/python/install.md","webpack:///./src/docs/linux/centos/sendmail.md","webpack:///./src/docs/linux/archlinux/sublime.md","webpack:///./src/docs/linux/centos/nginx.md","webpack:///./src/assets/images/bg.svg","webpack:///./src/docs/linux/shell/tools.md","webpack:///./src/docs/mvc/java/springboot.md","webpack:///./src/docs/linux/server/pppoe.md","webpack:///./src/docs/mvc/libray/segments.md","webpack:///./src/docs/linux/server/svn.md","webpack:///./src/docs/mvc/libray/swoole.md","webpack:///./src/docs/linux/ubuntu/firewall.md","webpack:///./src/docs/linux/server/vpn.md","webpack:///./src/docs/linux/shell/index.md","webpack:///./src/router.js","webpack:///./src/config.js","webpack:///./src/App.vue?9bce","webpack:///./src/App.js","webpack:///./src/App.js?8008","webpack:///./src/App.vue","webpack:///./src/main.js","webpack:///./src/docs/linux/shell/nginx.md","webpack:///./src/docs/linux/shell/redis.md","webpack:///./src/docs/mvc/app/flutter.md","webpack:///./src/docs/mvc/java/install.md","webpack:///./src/docs/linux/archlinux/nginx.md","webpack:///./src/docs/mvc/node/vue.md","webpack:///./src/docs/linux/server/ssl.md","webpack:///./src/docs/linux/archlinux/install.md","webpack:///./src/env.js","webpack:///./src/docs/linux/archlinux/index.md","webpack:///./src/docs/linux/server/dhcp.md","webpack:///./src/docs/mvc/php/composer.md","webpack:///./src/docs/mvc/cpp/vscode.md","webpack:///./src/docs/linux/centos/firewall.md","webpack:///./src/docs/index.md","webpack:///./src/docs/linux/shell/docker.md","webpack:///./src/docs/linux/centos/index.md","webpack:///./src/docs/mvc/libray/socket.md","webpack:///./src/docs/linux/server/git.md","webpack:///./src/docs/linux/shell/mysql.md","webpack:///./src/docs/linux/archlinux/cordova.md","webpack:///./src/docs/linux/archlinux/gnome.md","webpack:///./src/docs/mvc/libray/tesseract.md"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","Vue","use","VueRouter","routes","path","component","require","originalPush","location","this","catch","router","base","process","install","title","Env","$config","$obj","scan","setTime","socket","$reg","val","isRight","msg","reg","uname","tel","email","vcode","passwd","test","$menus","menus","content","_vm","_h","$createElement","_c","_self","attrs","staticClass","_m","class","$route","_v","staticRenderFns","mounted","body","style","backgroundColor","backgroundImage","methods","config","productionTip","Config","ElementUI","$ajax","axios","$storage","localStorage","$qrcode","QRCode","render","h","App","$mount","ontouchstart","plus","os","baseUrl","version","apiUrl","themeColor","copy","amapKey"],"mappings":"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","file":"js/app.f6fd3db9.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-2d0a4d7f\":\"3600d487\",\"chunk-d255ffcc\":\"8283b0e0\",\"chunk-e4dc0fb8\":\"a4a1efe4\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-d255ffcc\":1,\"chunk-e4dc0fb8\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-2d0a4d7f\":\"31d6cfe0\",\"chunk-d255ffcc\":\"d60b5a96\",\"chunk-e4dc0fb8\":\"1679dc4f\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = \"## FTP服务器\\nFTP 是File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的FTP应用程序，而所有这些应用程序都遵守同一种协议以传输文件。在FTP的使用当中，用户经常遇到两个概念：\\\"下载\\\"（Download）和\\\"上传\\\"（Upload）。\\\"下载\\\"文件就是从远程主机拷贝文件至自己的计算机上；\\\"上传\\\"文件就是将文件从自己的计算机中拷贝至远程主机上。用Internet语言来说，用户可通过客户机程序向（从）远程主机上传（下载）文件。\\n### 1) 防火墙设置\\n``` bash\\n# 添加FTP服务\\nfirewall-cmd --permanent --zone=public --add-service=ftp\\n# 重启防火墙\\nfirewall-cmd --reload\\n# 查看是否允许\\nfirewall-cmd --query-service=ftp\\n```\\n\\n### 2) 安装PureFTP\\n``` bash\\nyum install pure-ftpd openssl\\n```\\n\\n### 3) 配置\\n``` bash\\nvi /etc/pure-ftpd/pure-ftpd.conf\\n```\\n    # 虚拟用户数据\\n    PureDB /etc/pure-ftpd/pureftpd.pdb\\n    # 上传文件权限为777\\n    Umask 000:000\\n    # SSL加密\\n    TLS 0\\n\\n### 4) 启动服务\\n``` bash\\n# 开机启动\\nsystemctl enable pure-ftpd\\n# 启动\\nsystemctl start pure-ftpd\\n```\\n\\n### 5) 创建FTP系统用户\\n``` bash\\n# 创建用户组\\ngroupadd ftpgroup\\n# 添加FTP用户\\nuseradd -g ftpgroup -d /dev/null -s /etc ftpuser\\n```\\n\\n### 6) 添加虚拟用户\\n``` bash\\n# 虚拟用户'mvc'\\n(echo 密码; echo 确认秘密) | pure-pw useradd mvc -u ftpuser -d /home/www/mvc\\n# 刷新数据\\npure-pw mkdb\\n# 创建FTP目录\\nmkdir -p /home/www/mvc\\n# 修改所属\\nchown -R ftpuser:ftpgroup /home/www/mvc\\n# 修改权限\\nchmod -R 755 /home/www/mvc\\n# 重启服务\\nsystemctl restart pure-ftpd\\n```\\n\\n### 7) 客户端登陆FTP\\n打开文件夹 地址栏输入“ftp://服务器IP”（注意：点击右键“登陆”）\\n\\n### 8) 其他操作\\n``` bash\\n# 查看用户信息\\npure-pw show test\\n# 修改密码\\npure-pw passwd test\\n# 删除用户\\npure-pw userdel test\\npure-pw mkdb\\n```\\n\\n### 9) SSL认证方式\\n``` bash\\nvi /etc/pure-ftpd/pure-ftpd.conf\\n```\\n改成 TLS 1\\n**生成加密证书**\\n``` bash\\n# 创建目录\\nmkdir -p /etc/ssl/private\\n# 生成证书\\nopenssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem\\n```\\n- Country Name (2 letter code) [XX]: <-- 国家 \\\"CN\\\"\\n- State or Province Name (full name) []: <-- 省份 \\\"YN\\\"\\n- Locality Name (eg, city) [Default City]: <-- 城市 \\\"KunMing\\\"\\n- Organization Name (eg, company) [Default Company Ltd]: <-- 公司名称 \\\"WebMIS\\\"\\n- Organizational Unit Name (eg, section) []: <-- 公司名称\\n- Common Name (eg, your name or your server's hostname) []: <--主机名 \\\"server1.example.com\\\"\\n- Email Address []: <-- 邮箱地址\\n**重启服务**\\n``` bash\\n# 修改权限\\nchmod 600 /etc/ssl/private/pure-ftpd.pem\\n# 重启服务\\nsystemctl restart pure-ftpd\\n```\"","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","module.exports = \"## 关闭SELinux\\n``` bash\\nvi /etc/selinux/config\\n```\\nSELINUX=disabled\\n\\n## 升级系统\\n``` bash\\n# Desktop版\\nsudo update-manager -d\\nServer版\\nsudo do-release-upgrade -d\\n```\\n\\n## 双网卡配置\\n``` bash\\n# The primary network interface\\nauto eth0\\niface eth0 inet static\\n\\taddress 222.56.42.xxx\\n\\tnetmask 255.255.255.xxx\\n\\tgateway 222.56.42.xxx\\n\\t\\tdns-nameservers 211.98.72.8 211.98.2.4\\nauto eth2\\niface eth2 inet static\\n\\taddress 192.168.1.248\\n\\tnetmask 255.255.255.0\\n```\\n\\n## 查看DNS\\n``` bash\\ncat /etc/resolv.conf\\n```\\nnameserver 211.98.72.8<br/>\\nnameserver 211.98.2.4<br/>\\n\\n## 修改计算机名\\n``` bash\\n# 计算机名\\necho webserver.ksphp.com > /etc/hostname\\n/etc/init.d/hostname restart\\n# 查看\\nhostname\\nhostname -f\\n# 重新加载网络\\n/etc/init.d/networking restart\\n```\\n\"","module.exports = \"## 一、安装\\n```bash\\npip install flask\\n```\\n## 二、测试\\n```bash\\nmkdir $HOME/works/www/flask\\n```\\n###入口文件( flask/index.py )\\n```python\\n#!/bin/python\\n# -*- coding: UTF-8 -*-\\n\\nfrom flask import Flask\\napp = Flask(__name__)\\n \\n@app.route('/',methods=['GET', 'POST'])\\ndef index():\\n    return 'Hello World!'\\n```\\n运行\\n```bash\\nenv FLASK_APP=index.py flask run --host=0.0.0.0\\n```\\n\\n## 三、uWSGI\\n```bash\\npip install uwsgi\\n```\\n**配置文件( flash/server-config.ini )**\\n```bash\\n[uwsgi]\\nchdir = /home/webmis/works/www/flask/\\nwsgi-file = %(chdir)index.py\\nsocket = %(chdir)server.sock\\nlogto = %(chdir)web.log\\ncallable = app\\nprocesses = 4\\nchmod-socket = 666\\n``` \\n**启动uWSGI**\\n```bash\\nuwsgi --ini /home/webmis/works/www/flask/server-config.ini &\\n```\\n\\n## 四、Nginx( flask.conf )\\n```nginx\\nupstream flask {\\n    server unix:///home/webmis/works/www/flask/server.sock;\\n}\\n\\nserver {\\n    listen       80;\\n    server_name  flask.webmis.cn;\\n\\n    charset utf-8;\\n\\n    location / {\\n        uwsgi_pass  flask;\\n        uwsgi_send_timeout 60;  # 连接超时时间\\n        uwsgi_connect_timeout 60;  # 请求超时时间\\n        uwsgi_read_timeout 60;  # 读取超时时间\\n        include /etc/nginx/uwsgi_params;   # uwsgi参数\\n        # 允许跨域请求\\n        add_header 'Access-Control-Allow-Origin' '*';\\n        add_header 'Access-Control-Allow-Credentials' 'true';\\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\\n        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\\n    }\\n\\n}\\n```\\n重启Nginx\\n```bash\\nsystemctl restart nginx\\n```\\n\\n## 五、VSCode( launch.json )\\n```bash\\n{\\n    \\\"version\\\": \\\"0.2.0\\\",\\n    \\\"configurations\\\": [\\n        {\\n            \\\"name\\\": \\\"Python: Flask\\\",\\n            \\\"type\\\": \\\"python\\\",\\n            \\\"request\\\": \\\"launch\\\",\\n            \\\"module\\\": \\\"flask\\\",\\n            \\\"env\\\": {\\n                \\\"FLASK_APP\\\": \\\"index.py\\\"\\n            },\\n            \\\"args\\\": [\\n                \\\"run\\\",\\n                \\\"--host=0.0.0.0\\\",\\n                \\\"--no-debugger\\\",\\n                \\\"--no-reload\\\"\\n            ],\\n            \\\"jinja\\\": true\\n        }\\n    ]\\n}\\n```\\n\"","module.exports = \"## PHP调用(index.php)\\n```php\\n<?php\\nheader(\\\"Content-Type:text/html; charset=utf-8\\\");\\nif(isset($_GET['a']) && isset($_GET['b']) && !empty($_GET['a']) && !empty($_GET['b'])) {\\n\\t$command = './test '.$_GET['a'].' '.$_GET['b'];\\n\\t$result = passthru($command);\\n\\tprint_r($result);\\n}else{\\n\\techo \\\"输入不能为空！\\\";\\n}\\n\\n```\\n\\n## C/C++(test.cpp)\\n```c++\\n#include <iostream>\\n// #include<stdio.h>\\n\\nint main(int argc, char **argv) {\\n\\tint a = atol(argv[1]),b = atol(argv[2]);\\n\\tint sum = a + b;\\n\\tprintf(\\\"%d+%d=%d\\\\n\\\",a,b,sum);\\n\\treturn 0;\\n}\\n```\"","module.exports = \"## 安装\\n```bash\\npacman -S python python-setuptools python-pip\\n```\\n## 常用工具\\n```bash\\n# MySQL\\npip install mysql-connector-python\\n# GTK3\\npip install python-gobject\\n# Numpy\\npip install numpy\\n# Scipy\\npip install scipy\\n# selenium\\npip install selenium\\n```\"","module.exports = \"## 1) 安装邮件服务\\n```bash\\nyum install sendmail mailx\\n```\\n### 开机启动\\n```bash\\nsystemctl enable sendmail\\nsystemctl start sendmail\\n```\\n\\n### 发送测试邮件\\n```bash\\n# Shell命令\\necho '邮件正文' | mail -s  '测试邮件' admin@webmis.vip\\n# PHP函数\\nmail('admin@webmis.vip','测试邮件','邮件正文','from: WebMIS< admin@webmis.vip >')\\n```\\n\\n## 2) Smtp方式(解决垃圾邮件问题)\\n```bash\\nvi /etc/mail.rc\\n```\\n尾部添加\\n```bash\\n# SMTP\\nset from=WebMIS<EMAIL>\\nset smtp=smtp.163.com\\nset smtp-auth-user=EMAIL\\nset smtp-auth-password=PASSWD\\nset smtp-auth=login\\n```\\n\\n## 发送测试邮件\\n```bash\\n# Shell命令\\necho '邮件正文' | mail -s  '测试邮件' admin@webmis.vip\\n# PHP函数\\nexec(\\\"export LANG=en_US.UTF-8; echo '邮件正文' | mail -s  '测试邮件' admin@webmis.vip\\\")\\n```\\n\\n## 3) Python3方式\\n```bash\\n# 搜索\\nyum search pyton3\\n# 安装\\nyum install pyton36\\n# 查看版本\\npython36 -V\\n```\\n### Email.py 文件内容\\n```python\\n# /bin/python\\n# -*- coding: UTF-8 -*-\\n\\nimport sys\\nimport json\\n\\nimport smtplib\\nfrom email.mime.text import MIMEText\\n\\nclass Email :\\n\\n\\t# 构造函数\\n\\tdef __init__(self):\\n\\t\\tself.config={\\n\\t\\t\\t'smtp':'smtp.163.com',\\n\\t\\t\\t'port':'25',\\n\\t\\t\\t'user':'EMAIL',\\n\\t\\t\\t'passwd':'PASSWD',\\n\\t\\t\\t'alias':'牵引力'\\n\\t\\t}\\n\\n\\t# SMTP发送邮件\\n\\tdef sendSmtp(self,mail,subject,body):\\n\\t\\tme='%s<%s>'%(self.config['alias'],self.config['user'])\\n\\t\\tmsg=MIMEText(body,'plain','utf-8')\\n\\t\\tmsg['Subject']=subject\\n\\t\\tmsg['From']=me\\n\\t\\tmsg['To']=mail\\n\\t\\ttry :\\n\\t\\t\\tserver=smtplib.SMTP()\\n\\t\\t\\tserver.connect(self.config['smtp'],self.config['port'])\\n\\t\\t\\tserver.login(self.config['user'],self.config['passwd'])\\n\\t\\t\\tserver.sendmail(me,mail,msg.as_string())\\n\\t\\t\\tserver.close()\\n\\t\\t\\treturn {'state':'y','msg':'发送成功'}\\n\\t\\texcept Exception as e :\\n\\t\\t\\treturn {'state':'n','msg':'%s: %s'%('发送错误',e)}\\n\\n# 1.接收命令行参数:\\n# windows：python36 Email.py '{\\\\\\\"to\\\\\\\":\\\\\\\"EMAIL\\\\\\\",\\\\\\\"subject\\\\\\\":\\\\\\\"Python发邮件\\\\\\\",\\\\\\\"body\\\\\\\":\\\\\\\"欢迎学习牵引力PHP课程！\\\\\\\"}'\\n# linux：python36 Email.py '{\\\"to\\\":\\\"EMAIL\\\",\\\"subject\\\":\\\"Python发邮件\\\",\\\"body\\\":\\\"欢迎学习牵引力PHP课程！\\\"}'\\nprem=json.loads(sys.argv[1])\\n\\n# 2.内部参数\\n# prem={'to':'EMAIL','subject':'Python发邮件','body':'欢迎学习牵引力PHP课程！'}\\n\\n# 实例化\\ndb=Email()\\nres=db.sendSmtp(prem['to'],prem['subject'],prem['body'])\\nprint(res)\\n```\\n### 测试邮件发送\\n```bash\\npython Email.py '{\\\"to\\\":\\\"EMAIL\\\",\\\"subject\\\":\\\"Python发邮件\\\",\\\"body\\\":\\\"欢迎学习牵引力PHP课程！\\\"}'\\n```\\n\\n## 4) Crontab定时任务\\n### 基本格式\\n```bash\\n* * * * * command\\n分 时 日 月 周 命令\\n```\\n\\n### 使用方法\\n```bash\\n# 编辑\\ncrontab -e\\n# 查看\\ncrontab -l\\n```\\n\\n### 定时邮件发送（index.php）\\n```php\\n// 系统时间\\n$date = date('Y-m-d H:i:s');\\n\\n// 参数\\n$to='klingsoul@163.com';\\n$subject='PHP课程('.$date.')';\\n$body='欢迎学习牵引力PHP课程！';\\n\\n// 方式一：PHPMailer\\nrequire 'email.php';\\n$res = sendSMTP(['to'=>$to,'subject'=>'PHPMailer：'.$subject,'body'=>$body]);\\n// 方式二：SendMail\\nexec('export LANG=en_US.UTF-8; echo \\\"'.$body.'\\\" | mail -s \\\"SendMail：'.$subject.'\\\" '.$to);\\n// 方式二：Python\\nsystem('export LANG=en_US.UTF-8; python36 Email.py \\\\'{\\\"to\\\":\\\"'.$to.'\\\",\\\"subject\\\":\\\"Python：'.$subject.'\\\",\\\"body\\\":\\\"'.$body.'\\\"}\\\\'');\\n```\\n\\n\"","module.exports = \"## 安装Python插件\\n```bash\\npacman -S python-gobject\\n```\\n\\n## 一、插件目录\\nSublime3 > Preferences > BrowsePackages > InputIbus\\n### 快捷键( Default (Linux).sublime-keymap )\\n```json\\n[\\n\\t{ \\\"keys\\\": [\\\"ctrl+shift+a\\\"], \\\"command\\\": \\\"input_ibus\\\" }\\n]\\n```\\n### 命令( InputIbus.sublime-commands )\\n```json\\n[{\\n\\t\\\"caption\\\": \\\"InputIbus\\\",\\n\\t\\\"command\\\": \\\"input_ibus\\\"\\n}]\\n```\\n\\n## 二、插件( inputibus.py )\\n```python\\n#!/usr/bin/env python\\n# coding: utf8\\n\\nimport sublime\\nimport sublime_plugin\\n\\nimport subprocess\\nimport os\\n\\nclass InputIbusCommand(sublime_plugin.TextCommand):\\n\\n\\tdef run(self, edit):\\n\\t\\t# 内容\\n\\t\\tlocation = os.path.join(sublime.packages_path(), 'InputIbus', 'lib', 'linux_gtk3_ibus_input.py')\\n\\t\\targs = [location]\\n\\t\\tproc = subprocess.Popen(args, stdout=subprocess.PIPE)\\n\\t\\ttext_returned = proc.communicate()[0].strip()\\n\\t\\ttext_output = text_returned.decode('utf-8')\\n\\t\\t# 输入内容\\n\\t\\tsel = self.view.sel()\\n\\t\\tif text_output:\\n\\t\\t\\tfor region in sel:\\n\\t\\t\\t\\tif region.size() == 0:\\n\\t\\t\\t\\t\\tself.view.insert(edit, region.end(), text_output)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tself.view.replace(edit, region, text_output)\\n```\\n### 调用窗口( lib/linux_gtk3_ibus_input.py )\\n```python\\n#!/usr/bin/env python\\n\\nimport gi\\ngi.require_version('Gtk', '3.0')\\nfrom gi.repository import Gtk\\n\\nclass SimpleTextInput:\\n\\tdef __init__(self):\\n\\t\\tself.print_text_flag = False\\n\\t\\t# 创建窗口\\n\\t\\twin = Gtk.Window()\\n\\t\\twin.connect(\\\"delete-event\\\", Gtk.main_quit)\\n\\t\\twin.set_title(\\\"中文输入\\\")\\n\\t\\twin.set_default_size(600, 60)\\n\\t\\t# win.set_position(Gtk.WIN_POS_CENTER)\\n\\t\\twin.connect(\\\"destroy\\\", self.destroy)\\n\\t\\twin.set_border_width(10)\\n\\t\\t# 文本框\\n\\t\\tself.textInput = Gtk.Entry()\\n\\t\\tself.textInput.set_tooltip_text(\\\"Press Ctrl-Enter or Enter to insert string\\\")\\n\\t\\tself.textInput.connect(\\\"key_press_event\\\", self.on_key_press)\\n\\t\\twin.add(self.textInput)\\n\\t\\t# 显示窗口\\n\\t\\twin.show_all()\\n\\t\\tGtk.main()\\n\\t# 执行插入\\n\\tdef destroy(self, widget, data=None):\\n\\t\\tif self.print_text_flag == False:\\n\\t\\t\\tself.print_text()\\n\\t\\tGtk.main_quit()\\n\\t# Enter插入\\n\\tdef on_key_press(self, widget, event):\\n\\t\\tkeyname = event.keyval\\n\\t\\tif keyname==65293:\\n\\t\\t\\tself.print_text()\\n\\t\\t\\tself.print_text_flag = True\\n\\t\\t\\tself.destroy(self, widget)\\n\\t\\tif keyname==65307:\\n\\t\\t\\tGtk.main_quit()\\n\\t# 输出文本\\n\\tdef print_text(self):\\n\\t\\tbuffer = self.textInput.get_buffer()\\n\\t\\tprint(buffer.get_text())\\n\\nif __name__ == \\\"__main__\\\":\\n\\ttxt = SimpleTextInput()\\n```\\n\\n### 修改权限\\n```bash\\nchmod -R 777 InputIbus\\n```\\n\"","module.exports = \"## 防火墙\\n```bash\\n# 添加规则\\nfirewall-cmd --permanent --zone=public --add-service=http\\nfirewall-cmd --permanent --zone=public --add-service=mysql\\n\\n# 重启\\nfirewall-cmd --reload\\n```\\n\\n## 软件仓库\\n```bash\\nyum install epel-release -y\\n\\n# PHP7.3\\nyum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm -y\\n```\\n\\n## 一、安装Nginx\\n```bash\\n# Nginx 官方源\\nvi /etc/yum.repos.d/nginx.repo\\n```\\n**添加如下内容**\\n```bash\\n[nginx]\\nname=nginx repo\\nbaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/\\ngpgcheck=0\\nenabled=1\\n```\\n\\n### 安装\\n```bash\\nyum install nginx -y\\n\\n# 开机启动\\nsystemctl enable nginx\\nsystemctl start nginx\\n```\\n\\n### 测试\\n```bash\\nhttp://服务器IP\\n```\\n\\n### 配置\\n```bash\\nvi /etc/nginx/nginx.conf\\n```\\n文件内容\\n```nginx\\n\\n\\tuser root\\n\\n\\tkeepalive_timeout 30;\\n\\n\\t# Gzip压缩\\n\\tgzip on;\\n\\tgzip_buffers 4 8k;\\n\\tgzip_min_length 1k;\\n\\tgzip_types application/javascript text/css application/octet-stream application/pdf image/gif image/jpeg image/png image/x-icon;\\n\\tgzip_vary on;\\n\\n\\t#include /etc/nginx/conf.d/*.conf;\\n\\tinclude /home/vhosts/*.conf;\\n```\\n\\n## 二、配置虚拟主机\\n```bash\\n# 创建目录\\nmkdir -p /home/vhosts\\n# 拷贝配置文件\\ncp /etc/nginx/conf.d/*.conf /home/vhosts/default.conf\\n# 编辑配置文件\\nvi /home/vhosts/default.conf\\n```\\n文件内容\\n```nginx\\nserver {\\n\\t# 监听80端口(默认服务器只允许一台虚拟主机)\\n\\tlisten       80 default_server;\\n\\t# 监听域名\\n\\tserver_name  localhost;\\n\\t# 指向目录\\n\\troot /home/www/;\\n\\t# 默认打开文件\\n\\tindex index.php index.html;\\n\\n\\t# 设置编码\\n\\tcharset utf-8;\\n\\n\\t# 网站根目录\\n\\tlocation / {\\n\\n\\t}\\n\\n\\t# 禁用.ht文件\\n\\tlocation ~ /\\\\.ht {\\n\\t\\tdeny  all;\\n\\t}\\n}\\n```\\n### 重启Nginx\\n```bash\\nsystemctl restart nginx\\n```\\n### 测试\\n```bash\\necho '<h1>Server</h1>' > /home/www/test.html\\n```\\nhttp://服务器IP/test.html\\n\\n## 三、安装PHP\\n```bash\\n# PHP5\\nyum install php-fpm php-mysql php-cli php-gd php-pdo php-mbstring -y\\n\\n# PHP7.3\\nyum install php73-php-fpm php73-php-cli php73-php-gd php73-php-pdo php73-php-mbstring -y\\n\\n# Phalcon\\nyum install php73-php-phalcon3 -y\\n\\n# Swoole\\nyum install php73-php-pecl-swoole4 -y\\n\\n# Redis\\nyum install redis php73-php-pecl-redis5 -y\\n\\n# 开机启动\\nsystemctl enable php-fpm\\nsystemctl start php-fpm\\n\\nsystemctl enable redis\\nsystemctl start redis\\n\\nsystemctl enable php73-php-fpm\\nsystemctl start php73-php-fpm\\n```\\n\\n### 配置\\n```bash\\nvi /etc/php.ini\\nvi /etc/opt/remi/php73/php.ini\\n```\\n- date.timezone = \\\"Asia/Shanghai\\\"\\t#时区\\n- session.save_path = \\\"/tmp\\\"\\t#Session目录\\n\\n### Session问题\\n```bash\\nchmod -R 777 /var/opt/remi/php73/lib/php/session\\n```\\n\\n### PHP-FPM配置\\n```bash\\nvi /etc/opt/remi/php73/php-fpm.d/www.conf\\n```\\n- user = nginx\\n- group = nginx\\n\\n### Nginx调用PHP\\n```nginx\\n\\t# 调用PHP环境\\n\\tlocation ~ \\\\.php$ {\\n\\t\\tfastcgi_pass   127.0.0.1:9000;\\n\\t\\tfastcgi_index  index.php;\\n\\t\\tfastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\\n\\t\\tinclude        fastcgi_params;\\n\\t}\\n```\\n\\n## 四、安装MariaDB\\n```bash\\n# 安装\\nyum install mariadb mariadb-server -y\\n\\n# 开机启动\\nsystemctl enable mariadb\\nsystemctl start mariadb\\n\\n# 查看运行\\nnetstat -tap | grep mysql\\n```\\n\\n### 配置(root密码)\\n```bash\\nmysql_secure_installation\\n```\\n\\n## 五、数据库管理\\n```bash\\nhttps://github.com/vrana/adminer/releases/download/v4.7.5/adminer-4.7.5.php\\n```\\n\\n## 六、ThinkPHP5重写\\n### 1) PHP配置\\n```bash\\nvi /etc/php.ini\\n```\\ncgi.fix_pathinfo = 1\\n### 2) Nginx配置\\n```bash\\n    location / {\\n        index  index.html index.htm index.php;\\n        if (!-e $request_filename) {\\n            rewrite  ^(.*)$  /index.php?s=/$1  last;\\n            break;\\n        }\\n     }\\n\\n     location ~ \\\\.php$ {\\n        fastcgi_pass   127.0.0.1:9000;\\n        fastcgi_index  index.php;\\n        fastcgi_split_path_info  ^((?U).+\\\\.php)(/?.+)$;\\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\\n        fastcgi_param  PATH_INFO  $fastcgi_path_info;\\n        fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\\n        include        fastcgi_params;\\n    }\\n```\\n### 3) 重启服务\\n```bash\\nsystemctl restart nginx php-fpm\\n```\\n\"","module.exports = __webpack_public_path__ + \"img/bg.cd30d82e.svg\";","module.exports = \"## NTFS无法挂载问题\\n``` bash\\napt install ntfs-3g\\nntfsfix /dev/sda1\\n```\\n\\n## 网站压力测试\\n``` bash\\nsiege -c 200 -r 100 http://www.baidu.com\\nab -c 100 -n 1000 http://www.baidu.com/index.php\\n```\\nTransactions: 总共测试次数<br>\\nAvailability: 成功次数百分比<br>\\nElapsed time: 总共耗时多少秒<br>\\nData transferred: 总共数据传输<br>\\nResponse time: 等到响应耗时<br>\\nTransaction rate: 平均每秒处理请求数<br>\\nThroughput: 吞吐率<br>\\nConcurrency: 最高并发<br>\\nSuccessful transactions: 成功的请求数<br>\\nFailed transactions: 失败的请求数<br>\\n\\n## 端口扫描\\n``` bash\\nnmap www.baidu.com\\n```\\n\\n## 查看端口\\n``` bash\\nnetstat -anp | grep 80\\n```\\n\\n# 过滤内容\\n## 1) grep : 过滤字符\\n``` bash\\ncat /etc/passwd | grep 'root'\\n```\\n\\n## 2) cut : 截取字段\\n``` bash\\n# \\\":\\\"分割字符,截取第一段\\ncat /etc/passwd | cut -d \\\":\\\" -f 1\\n# 截取段落\\nhead -n 2 /etc/passwd | cut -c 2\\nhead -n 2 /etc/passwd | cut -c 1-10\\nhead -n 2 /etc/passwd | cut -c 2,4\\n```\\n语法 : cut -d \\\"分隔字符\\\" [-cf] n 这里的n是数字<br>\\n-d : 后面跟分隔字符,分隔字符要用双引号括起来<br>\\n-c : 后面接的是第几个字符<br>\\n-f : 后面接的是第几个区块<br>\\n\"","module.exports = \"## 一、插件( VSCode )\\n- Java Extension Pack\\n- Maven for Java\\n- Spring Boot Extension Pack\\n\\n### 创建项目 ( ctrl+shift+p )\\n- Spring Initializr\\n- Maven项目\\n- 依赖包：devTools和web\\n\\n### 创建文件( controller/IndexController.java )\\n```java\\npackage com.webmis.mvc.controller;\\n\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\n@RestController\\npublic class IndexController{\\n    @RequestMapping(\\\"/\\\")\\n    String home(){\\n        return \\\"首页\\\";\\n    }\\n}\\n```\\n\\n### F5调试 ( launch.json )\\n```json\\n{\\n    \\\"version\\\": \\\"0.2.0\\\",\\n    \\\"configurations\\\": [\\n        {\\n            \\\"type\\\": \\\"java\\\",\\n            \\\"name\\\": \\\"Debug (Launch)-DemoApplication<mvc>\\\",\\n            \\\"request\\\": \\\"launch\\\",\\n            \\\"cwd\\\": \\\"${workspaceFolder}\\\",\\n            \\\"console\\\": \\\"internalConsole\\\",\\n            \\\"stopOnEntry\\\": false,\\n            \\\"mainClass\\\": \\\"com.webmis.mvc.DemoApplication\\\",\\n            \\\"args\\\": \\\"\\\",\\n            \\\"projectName\\\": \\\"mvc\\\"\\n        },\\n        {\\n            \\\"type\\\": \\\"java\\\",\\n            \\\"name\\\": \\\"Debug (Attach)\\\",\\n            \\\"request\\\": \\\"attach\\\",\\n            \\\"hostName\\\": \\\"localhost\\\",\\n            \\\"port\\\": 0\\n        }\\n    ]\\n}\\n```\\n\\n### 浏览器 ( localhost:8080 )\\n\\n## 二、maven自动部署\\n### conf/tomcat-users.xml\\n```xml\\n<role rolename=\\\"manager-gui\\\"/>\\n<role rolename=\\\"manager-script\\\"/>\\n<user username=\\\"admin\\\" password=\\\"\\\" roles=\\\"manager-script,manager-gui\\\"/>\\n```\\n### conf/Catalina/localhost/manager.xml\\n```xml\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<Context privileged=\\\"true\\\" antiResourceLocking=\\\"false\\\"\\n    docBase=\\\"${catalina.home}/webapps/manager\\\">\\n    <Valve className=\\\"org.apache.catalina.valves.RemoteAddrValve\\\" allow=\\\"^.*$\\\" />\\n</Context>\\n```\\n### pom.xml\\n```xml\\n<plugin>\\n    <groupId>org.apache.tomcat.maven</groupId>\\n    <artifactId>tomcat7-maven-plugin</artifactId>\\n    <version>2.2</version>\\n    <configuration>\\n        <url>http://localhost:8080/manager/text</url>\\n        <username>admin</username>\\n        <password></password>\\n        <update>true</update>\\n        <path>/admin</path>\\n    </configuration>\\n</plugin>\\n```\\n### \\n```bash\\n# 安装工具\\npacman -S maven\\n# 第一次部署\\nmvn tomcat7:deploy\\n# 更新\\nmvn tomcat7:redeploy\\n```\\n\\n## 三、Servlet 部署\\npom.xml\\n```xml\\n    <packaging>war</packaging>\\n    <name>demo</name>\\n    <build>\\n        <finalName>demo</finalName>\\n    </build>\\n```\\nDemoApplication.java\\n```java\\npackage com.webmis.mvc;\\n\\nimport org.springframework.boot.SpringApplication;\\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\\nimport org.springframework.boot.builder.SpringApplicationBuilder;\\n\\n@SpringBootApplication\\npublic class DemoApplication extends SpringBootServletInitializer{\\n    @Override\\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\\n        return builder.sources(DemoApplication.class);\\n    }\\n\\n    public static void main(String[] args) {\\n        SpringApplication.run(DemoApplication.class, args);\\n    }\\n}\\n```\"","module.exports = \"## 安装PPPOE\\n``` bash\\n# CentOS\\nyum install ppp rp-pppoe\\n```\\n\\n### 允许本地验证\\n``` bash\\nvi /etc/ppp/options\\n#lock local\\n```\\n\\n### 添加DNS\\n``` bash\\nvi /etc/ppp/pppoe-server-options\\n\\n#require-pap\\nrequire-chap # 使用chap验证\\nlogin\\nlcp-echo-interval 10\\nlcp-echo-failure 2\\nms-dns 8.8.8.8\\nms-dns 8.8.4.4\\n```\\n\\n### 帐号密码\\n``` bash\\nvi /etc/ppp/chap-secrets\\n\\n# Client Server Passwd IP\\nadmin pptpd 654321 *\\n```\\n\\n### 启动服务\\n``` bash\\npppoe-server -I eth2 -L 192.168.10.1 -R 192.168.10.5 -N 245\\n```\\nI : 指定响应PPPOE请求的端口<br>\\nL : PPPOE服务器的IP地址<br>\\nR : 分配给客户端IP地址,从192.168.10.5开始<br>\\nN : IP地址递增几个, 192.168.10.5-250<br>\\n\\n## 开启IP转发功能\\n``` bash\\nvi /etc/sysctl.conf\\n```\\nnet.ipv4.ip_forward = 1\\n``` bash\\nsysctl -p\\n```\\n\\n## 防火墙配置\\n### 1) Firewalld\\n``` bash\\n# 添加包转发\\nfirewall-cmd --permanent --direct --add-rule ipv4 filter POSTROUTING 0 -t nat -s 192.168.10.0/24 -o eth0 -j MASQUERADE\\n\\n# 重启防火墙\\nfirewall-cmd --reload\\n```\\n\\n### 2) Iptables\\n``` bash\\n# 添加包转发\\niptables -t nat -A POSTROUTING -s 192.168.10.0/24 -o eth0 -j MASQUERADE\\nservice iptables save\\n```\\n\\n### 限制速度(10/sec 大概30kb/s)\\n``` bash\\nvi /etc/sysconfig/iptables\\n```\\n-A FORWARD -s 192.168.10.4 -m limit --limit 10/sec -j ACCEPT<br>\\n-A FORWARD -s 192.168.10.4 -j DROP<br>\\n-A FORWARD -s 192.168.10.120 -m limit --limit 20/sec -j ACCEPT<br>\\n-A FORWARD -s 192.168.10.120 -j DROP<br>\\n``` bash\\n# 重启服务\\nservice iptables restart\\nservice pptpd restart\\n```\\n\"","module.exports = \"## 一、实现视频播放\\n### Html\\n``` html\\n<div style=\\\"text-align: center;\\\">\\n\\t<video id=\\\"video\\\" preload=\\\"metadata\\\" controls autoplay style=\\\"width: 80%;\\\"></video>\\n</div>\\n```\\n### JavaScript\\n``` javascript\\n/* AJAX */\\nvar xhr = new XMLHttpRequest();\\nxhr.open('POST', '/home/docs/play', true);\\nxhr.responseType = 'blob';\\nxhr.onload = function(e) {\\n\\tif (this.status == 200) {\\n\\t\\t// Blob 二进制视频\\n\\t\\tvar blob = this.response;\\n\\t\\tdocument.getElementById('video').src =  URL.createObjectURL(blob);\\n\\t}\\n}\\nxhr.send();\\n```\\n\\n### PHP\\n``` php\\n/* 视频流 */\\nfunction playAction(){\\n\\theader('Access-Control-Allow-Origin: *');\\n\\theader('Content-type: video/mp4');\\n\\techo file_get_contents('upload/vod/test.mp4');\\n}\\n```\\n\\n\\n## 二、流媒体播放器\\n### Html\\n``` html\\n<div id=\\\"wmPlayer\\\" class=\\\"wm_vod\\\">\\n\\t<video width=\\\"100%\\\" conrtols=\\\"true\\\" preload=\\\"metadata\\\" poster=\\\"\\\"></video>\\n\\t<div class=\\\"wm_vod_play\\\"><em class=\\\"play\\\"></em></div>\\n\\t<div class=\\\"wm_vod_title\\\"><h1>视频标题</h1><span>剧集：<b>30</b></span></div>\\n\\t<div class=\\\"wm_vod_controls\\\">\\n\\t\\t<div class=\\\"wm_load\\\">\\n\\t\\t\\t<div class=\\\"wm_load_played\\\"></div>\\n\\t\\t\\t<div class=\\\"wm_load_buffered\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"control_play\\\"><em class=\\\"play\\\"></em></div>\\n\\t\\t<div class=\\\"control_time\\\">\\n\\t\\t\\t<span class=\\\"control_time_current\\\">--:--</span>\\n\\t\\t\\t<span class=\\\"control_time_split\\\"> / </span>\\n\\t\\t\\t<span class=\\\"control_time_duration\\\">--:--</span>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"control_right\\\">\\n\\t\\t\\t<div class=\\\"control_right_fullscreen\\\"><em class=\\\"request\\\"></em></div>\\n\\t\\t</div>\\n\\t</div>\\n</div>\\n```\\n\\n### CSS\\n``` css\\n.wm_vod{position: relative; z-index: 10; width: 100%; background-color: #000; overflow: hidden;}\\n.wm_vod video{width: 100%; height: 100%;}\\n.wm_vod_play{position: absolute; z-index: 88; left: 0; top: 0; width: 100%; height: 100%; cursor: pointer; user-select: none; background-position: center center; background-size: 100%; background-repeat: no-repeat; background-image: url(); background-color: rgba(0,0,0,0.5);}\\n.wm_vod_play em{position: absolute; width: 60px; height: 60px; line-height: 60px; border-radius: 30px; top: calc(50% - 30px); margin-left: calc(50% - 30px);}\\n.wm_vod_play .play{background: url(images/play.svg) no-repeat center center,rgba(0,0,0,0.5);}\\n.wm_vod_play .pause{background: url(images/pause.svg) no-repeat center center,rgba(0,0,0,0.5);}\\n.wm_vod_play .replay{background: url(images/replay.svg) no-repeat center center,rgba(0,0,0,0.5);}\\n.wm_vod_controls{position: absolute; z-index: 88; bottom: 0; width: 100%; height: 45px; line-height: 45px; background-color: rgba(24,24,24,0.7);}\\n.wm_load{cursor: pointer; position: absolute; width: 100%; height: 2px; margin-top: -2px; background-color: rgba(100,100,100,0.5);}\\n.wm_load_played{position: absolute; z-index: 2; width: 0%; height: 100%; background-color: #6FB737;}\\n.wm_load_buffered{position: absolute; z-index: 1; width: 0%; height: 100%; background-color: rgba(200,200,200,0.5);}\\n.control_play{float: left; cursor: pointer; display: inline-block; width: 24px; height: 24px; line-height: 24px; text-align: center; border-radius: 20px; border: rgba(255,255,255,0.3) 5px solid; margin: 5px 0 0 10px;}\\n.control_play em{display: inline-block; overflow: hidden; width: 100%; height: 100%;}\\n.control_play .play{background: url(images/play.svg) no-repeat center center; background-size:  auto 70%;}\\n.control_play .pause{background: url(images/pause.svg) no-repeat center center; background-size:  auto 70%;}\\n.control_time{display: inline-block; margin-left: 10px;}\\n.control_time_current{color: #DEDEDE;}\\n.control_time_split{color: rgba(255,255,255,0.5);}\\n.control_time_duration{color: rgba(255,255,255,0.5);}\\n.control_right{float: right; margin-right: 10px;}\\n.control_right_fullscreen{float: left; cursor: pointer; display: inline-block; width: 24px; height: 24px; line-height: 24px; text-align: center; margin-top: 10px;}\\n.control_right_fullscreen em{display: inline-block; overflow: hidden; width: 100%; height: 100%;}\\n.control_right_fullscreen .request{background: url(images/max.svg) no-repeat center center; background-size:  auto 70%;}\\n.control_right_fullscreen .exit{background: url(images/min.svg) no-repeat center center; background-size:  auto 70%;}\\n```\\n\\n### 切成流媒体\\n``` bash\\n# HLS Segments\\nffmpeg -i foo.mp4 -g 25 -hls_time 1 -hls_list_size 0 index.m3u8\\n```\\n\\n### HLS插件\\n``` html\\n<script src=\\\"https://cdn.jsdelivr.net/npm/hls.js@latest\\\"></script>\\n```\\n\\n### JavaScript\\n``` javascript\\n// Html5视频\\nlet player = document.getElementById('wmPlayer');\\nlet video = player.children[0];\\nlet fullscreen = document.getElementsByClassName('control_right_fullscreen')[0];\\nlet title = document.getElementsByClassName('wm_vod_controls')[0];\\nlet controls = document.getElementsByClassName('wm_vod_title')[0];\\nlet play = document.getElementsByClassName('control_play')[0];\\nlet pause = document.getElementsByClassName('wm_vod_play')[0];\\nlet played = document.getElementsByClassName('wm_load_played')[0];\\nlet buffered = document.getElementsByClassName('wm_load_buffered')[0];\\nlet progress = document.getElementsByClassName('wm_load')[0];\\nlet url = document.getElementsByClassName('wm_url')[0];\\nlet next = document.getElementsByClassName('wm_next')[0];\\n\\n/* 禁用 */\\nvideo.controls = false;\\n// 鼠标右键\\nplayer.oncontextmenu=function(){return false;}\\n\\n/* 全屏 */\\nlet Fullscreen = function(){\\n\\tlet cls = '';\\n\\t// W3C\\n\\tif(video.requestFullscreen){\\n\\t\\tif(document.exitFullscreen){\\n\\t\\t\\tdocument.exitFullscreen();\\n\\t\\t\\tcls = 'request';\\n\\t\\t}else{\\n\\t\\t\\tplayer.requestFullscreen();\\n\\t\\t\\tcls = 'exit';\\n\\t\\t}\\n\\t// Chrome\\n\\t}else if(video.webkitRequestFullScreen){\\n\\t\\tif(document.webkitIsFullScreen){\\n\\t\\t\\tdocument.webkitCancelFullScreen();\\n\\t\\t\\tcls = 'request';\\n\\t\\t}else{\\n\\t\\t\\tplayer.webkitRequestFullScreen();\\n\\t\\t\\tcls = 'exit';\\n\\t\\t}\\n\\t// firefox\\n\\t}else if(video.mozRequestFullScreen){\\n\\t\\tif(document.mozFullScreen){\\n\\t\\t\\tdocument.mozCancelFullScreen();\\n\\t\\t\\tcls = 'request';\\n\\t\\t}else{\\n\\t\\t\\tplayer.mozRequestFullScreen();\\n\\t\\t\\tcls = 'exit';\\n\\t\\t}\\n\\t// IE11\\n\\t}else if(video.msRequestFullscreen){\\n\\t\\tif(document.msFullscreenElement){\\n\\t\\t\\tdocument.msExitFullscreen();\\n\\t\\t\\tcls = 'request';\\n\\t\\t}else{\\n\\t\\t\\tplayer.msRequestFullscreen();\\n\\t\\t\\tcls = 'exit';\\n\\t\\t}\\n\\t}\\n\\t// 改变样式\\n\\tfullscreen.innerHTML = '<em class=\\\"'+cls+'\\\"></em>';\\n}\\n// 双击全屏\\nplayer.ondblclick =function(){\\n\\tFullscreen();\\n};\\n// 全屏、退出\\nfullscreen.onclick = function(){\\n\\tFullscreen();\\n}\\n\\n/* 控制播放 */\\nlet Play = function(){\\n\\tpause.style['background-image'] = '';\\n\\tpause.style['background-color'] = '';\\n\\tif(video.paused){\\n\\t\\tvideo.play();\\n\\t\\tpause.style.display = 'none';\\n\\t\\tpause.innerHTML = '<em class=\\\"play\\\"></em>';\\n\\t\\tplay.innerHTML = '<em class=\\\"pause\\\"></em>';\\n\\t}else{\\n\\t\\tvideo.pause();\\n\\t\\tpause.style.display = 'block';\\n\\t\\tpause.innerHTML = '<em class=\\\"pause\\\"></em>';\\n\\t\\tplay.innerHTML = '<em class=\\\"play\\\"></em>';\\n\\t}\\n};\\n// 播放\\nplayer.children[1].onclick = function(){\\n\\tPlay();\\n}\\n// 暂停\\nplayer.children[0].onclick = function(){\\n\\tPlay();\\n}\\n// 按钮\\nplay.onclick = function(){\\n\\tPlay();\\n}\\n\\n/* 时间转换 */\\nlet FormatTime = function(t){\\n\\tt = parseInt(t);\\n\\tlet time = '';\\n\\tif(t>=3600){\\n\\t\\tlet h = parseInt(t/3600);\\n\\t\\tlet m = parseInt((t-h*3600)/60);\\n\\t\\tlet s = parseInt(t-h*3600-m*60);\\n\\t\\ttime = (Array(2).join(0) + h).slice(-2)+':'+(Array(2).join(0) + m).slice(-2)+':'+(Array(2).join(0) +s).slice(-2)\\n\\t}else if(t>=60 && t<3600){\\n\\t\\tlet m = parseInt(t/60);\\n\\t\\tlet s =  parseInt(t-m*60);\\n\\t\\ttime = (Array(2).join(0) + m).slice(-2)+':'+(Array(2).join(0) +s).slice(-2)\\n\\t}else{\\n\\t\\ttime = '00:'+(Array(2).join(0) + t).slice(-2);\\n\\t}\\n\\treturn time;\\n}\\n\\n/* 播放进度 */\\nvideo.ontimeupdate=function(){\\n\\tlet t1=this.currentTime;\\n\\tlet t2=this.duration;\\n\\t// 当前时间:视频总长\\n\\tdocument.getElementsByClassName('control_time_current')[0].innerHTML = FormatTime(t1);\\n\\tdocument.getElementsByClassName('control_time_duration')[0].innerHTML = FormatTime(t2);\\n\\t// 已加载\\n\\tbuffered.style.width = parseInt(this.buffered.end(0)/t2*100)+'%';\\n\\t// 已播放\\n\\tplayed.style.width = parseInt(t1/t2*100)+'%';\\n\\t// 完成\\n\\tif(t1==t2){\\n\\t\\tpause.style['background-image'] = 'url('+video.poster+')';\\n\\t\\tpause.style['background-color'] = '#000';\\n\\t\\tpause.innerHTML = '<em class=\\\"replay\\\"></em>';\\n\\t\\tpause.style.display = 'block';\\n\\t\\tplayed.style.width = '0%';\\n\\t\\t// 是否跳转\\n\\t\\tif(next.innerText){\\n\\t\\t\\twindow.location.href = next.innerText;\\n\\t\\t}\\n\\t}\\n}\\n\\n/* 点击进度条 */\\nprogress.onmousedown = function(e){\\n\\t let length = e.pageX-player.offsetLeft;\\n\\t let percent = length/this.offsetWidth;\\n\\tvideo.currentTime = percent*video.duration;\\n}\\nprogress.onmouseover = function(){\\n\\tthis.style.height = '5px';\\n\\tthis.style['margin-top'] = '-5px';\\n}\\nprogress.onmouseout = function(){\\n\\tthis.style.height = '2px';\\n\\tthis.style['margin-top'] = '-2px';\\n}\\n\\n/* 控制面板 */\\nlet controlInter;\\nplayer.onmousemove = function(){\\n\\t// 显示\\n\\ttitle.style.display = 'block';\\n\\tcontrols.style.display = 'block';\\n\\tplayer.style.cursor = '';\\n\\t// 倒计时\\n\\tclearInterval(controlInter);\\n\\tcontrolInter = setInterval(hiddenControl, 3000);\\n}\\nlet hiddenControl = function(){\\n\\t// 隐藏\\n\\ttitle.style.display = 'none';\\n\\tcontrols.style.display = 'none';\\n\\tplayer.style.cursor = 'none';\\n\\tclearInterval(controlInter);\\n}\\n\\n/* 窗口改变 */\\nwindow.onresize = function(){\\n\\t// 是否全屏\\n\\tlet isFull = function(){\\n\\t\\tlet isFull =  document.fullscreenEnabled || window.fullScreen || document.webkitIsFullScreen || document.msFullscreenEnabled;\\n\\t\\tif(isFull === undefined) isFull = false;\\n\\t\\treturn isFull;\\n\\t}\\n\\t// 退出全屏\\n\\tif(!isFull()){\\n\\t\\tfullscreen.innerHTML = '<em class=\\\"request\\\"></em>';\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/* 键盘事项 */\\ndocument.onkeydown=function(event){\\n\\tlet e = event || window.event || arguments.callee.caller.arguments[0];\\n\\t// 空格播放\\n\\tif(e && e.keyCode==32){Play(); return false;}\\n}\\n\\n/* 播放视频流 */\\nif(Hls.isSupported()) {\\n\\tlet hls = new Hls();\\n\\thls.loadSource(url.innerText);\\n\\thls.attachMedia(video);\\n\\thls.on(Hls.Events.MANIFEST_PARSED,function() {\\n\\t\\tPlay();\\n\\t});\\n}else if (video.canPlayType('application/vnd.apple.mpegurl')) {\\n\\tvideo.src = url.innerText;\\n\\tvideo.addEventListener('canplay',function() {\\n\\t\\tPlay();\\n\\t});\\n\\t/* 调整视频高度 */\\n\\tlet size = function(){\\n\\t\\tlet w = player.clientWidth;\\n\\t\\tlet h = 9/16*w;\\n\\t\\tplayer.style.height = h+'px';\\n\\t}\\n\\twindow.onresize = size; size();\\n}\\n```\\n\\n\"","module.exports = \"## 防火墙设置\\n``` bash\\n# 添加SVN端口\\nfirewall-cmd --permanent --zone=public --add-port=3690/tcp\\n# 重启防火墙\\nfirewall-cmd --reload\\n```\\n\\n## 安装\\n``` bash\\n# CentOS\\nyum install subversion\\n$ Ubuntu\\napt-get install subversion\\n```\\n\\n## 配置\\n### 1) 创建版本库\\n``` bash\\n# SVN版本目录\\nmkdir /home/svn/ && cd /home/svn/\\n # 创建webmis版本库\\nsvnadmin create webmis\\n```\\n\\n### 2) 添加帐号密码\\n``` bash\\nvi webmis/conf/passwd\\n```\\n[users]<br>\\nuser = webmis654321<br>\\n\\n### 3) 配置权限\\n``` bash\\nvi webmis/conf/authz\\n```\\n[/]<br>\\nuser= rw<br>\\n\\n### 4) 配置服务\\n``` bash\\nvi webmis/conf/svnserve.conf\\n```\\nanon-access = none  # 关闭匿名访问<br>\\nauth-access = write  # 权限用户可读写<br>\\npassword-db = password  # 开启用户<br>\\nauthz-db = authz  # 开启权限<br>\\nrealm = My First Repository  # 提示信息<br>\\n\\n## 启动SVN服务\\n``` bash\\nsvnserve -d -r /home/svn\\n```\\n\\n## 客户端检出\\n``` bash\\nsvn checkout svn://IP/webmis/\\n```\\n\\n## 提交时自动更新网站\\n``` bash\\ncd webmis/hooks/\\ncp post-commit.tmpl post-commit\\nchmod -R 777 post-commit\\nvi post-commit\\n```\\n\\n### post-commit 文件内容\\n``` bash\\n#!/bin/sh\\nexport LANG=en_US.UTF-8\\nsvn update /home/www/webmis --username=user --password=webmis654321 --non-interactive\\nchmod -R 777 /home/www/webmis/*\\n```\\n\\n## 常见问题\\n### Database is locked\\n``` bash\\n# 进入SVN目录\\ncd .svn\\n# 拷贝\\nmv wc.db wc.db.old\\n# 打开数据库\\nsqlite3 wc.db.old\\n# 备份数据\\nsqlite> .backup main wc.db\\n# 退出\\nsqlite> .exit\\n```\\n\"","module.exports = \"## 安装\\n```bash\\n# Archlinux\\nyaourt -S php-swoole\\n# 加载扩展\\nvi /etc/php/conf.d/swoole.ini\\n```\\n## 一、服务器端( server.php )\\n```php\\n$server = new swoole_websocket_server(\\\"127.0.0.1\\\", 9502);\\n\\n$server->on('open', function($server, $req) {\\n    echo \\\"connection open: {$req->fd}\\\\n\\\";\\n});\\n\\n$server->on('message', function($server, $frame) {\\n    echo \\\"received message: {$frame->data}\\\\n\\\";\\n    $server->push($frame->fd, json_encode([\\\"hello\\\", \\\"world\\\"]));\\n});\\n\\n$server->on('close', function($server, $fd) {\\n    echo \\\"connection close: {$fd}\\\\n\\\";\\n});\\n\\n$server->start();\\n```\\n### 启动服务\\n```bash\\nphp -S localhost:8001 server.php\\n```\\n\\n## 二、客户端端( client.html )\\n```javascript\\n<script type=\\\"text/javascript\\\">\\n\\tvar socket = new WebSocket('ws://127.0.0.1:9502/');\\n\\t// 链接服务器\\n\\tsocket.onopen = function(event) {\\n\\t\\tconsole.log('链接成功！');\\n\\t}\\n\\t// 接收消息\\n\\tsocket.onmessage = function(event) {\\n\\t\\tconsole.log(event);\\n\\t}\\n\\t// 发送消息\\n\\t// socket.send('客户端消息!！');\\n</script>\\n```\\n\\n## 三、Nginx( wss )\\n```nginx\\nupstream websocket {\\n    server 127.0.0.1:9502;\\n    keepalive 1024;\\n}\\nserver {\\n    listen       443 http2 ssl;\\n\\n    location /demo {\\n        proxy_pass http://websocket;\\n        proxy_http_version 1.1;\\n        proxy_set_header Upgrade $http_upgrade;\\n        proxy_set_header Connection \\\"Upgrade\\\";\\n        proxy_set_header Connection \\\"keep-alive\\\";\\n        proxy_set_header X-Real-IP $remote_addr;\\n    }\\n}\\n```\\n\\n\"","module.exports = \"## UFW防火墙\\n``` bash\\n# 安装\\nsudo apt-get install ufw\\n# 开机启动\\nsudo ufw enable\\n# 默认规则\\nsudo ufw default deny\\n```\\n\\n### 重启防火墙\\n``` bash\\nsudo ufw reload\\n```\\n\\n### 查看状态\\n``` bash\\nsudo ufw status\\n```\\n\\n### 开启/禁用端口或服务\\n``` bash\\n# 允许外部访问80端口\\nsudo ufw allow 80\\n\\n# 禁止外部访问80端口\\nsudo ufw delete allow 80\\n\\n# 允许此IP访问所有的本机端口\\nsudo ufw allow from 192.168.1.1\\n\\n# 禁止外部访问smtp服务\\nsudo ufw deny smtp\\n\\n# 删除smtp服务\\nsudo ufw delete allow smtp\\n\\n# 拒绝所有的流量从TCP的10.0.0.0/8 到端口22的地址192.168.0.1\\nufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port\\n```\\n\"","module.exports = \"## 安装PPTPD\\n``` bash\\n# CentOS\\nyum install pptpd\\n$ Ubuntu\\napt-get install pptpd\\n```\\n\\n## 配置\\n``` bash\\nvi /etc/pptpd.conf\\n```\\noption /etc/ppp/options.pptpd # 配置文件<br>\\ndebug # 日志写入 /var/log/messages<br>\\nlocalip 192.168.100.1 # VPN服务器地址,可以任意<br>\\nremoteip 192.168.100.5-254 # 客户端IP段,可以任意<br>\\n\\n### 配置文件\\n``` bash\\nvi /etc/ppp/options.pptpd\\n```\\nrefuse-pap # 拒绝pap身份验证<br>\\nrefuse-chap # 拒绝chap身份验证<br>\\nrefuse-mschap # 拒绝mschap身份验证<br>\\nrequire-mschap-v2 # 使用mschap-v2身份验证<br>\\nrequire-mppe-128 # 要求128位MPPE加密<br>\\nms-dns 8.8.8.8<br>\\nms-dns 8.8.4.4<br>\\nproxyarp # 启动ARP代理<br>\\n\\n### 帐号密码\\n``` bash\\nvi /etc/ppp/chap-secrets\\n```\\nadmin pptpd 654321 *\\n\\n## 启动服务\\n``` bash\\n# CentOS 7\\nsystemctl enable pptpd\\nsystemctl start pptpd\\n\\n# CentOS 6\\nchkconfig pptpd on\\nservice pptpd start\\n```\\n\\n## 开启IP转发功能\\n``` bash\\nvi /etc/sysctl.conf\\n```\\nnet.ipv4.ip_forward = 1\\n``` bash\\nsysctl -p\\n```\\n\\n## 防火墙配置\\n### 1) Firewalld\\n``` bash\\n# 添加包转发\\n# firewall-cmd --permanent --direct --add-rule ipv4 filter POSTROUTING 0 -t nat -s 192.168.100.0/24 -o eth0 -j MASQUERADE\\nfirewall-cmd --permanent --direct --add-rule ipv4 filter POSTROUTING 0 -t nat -o eth0 -j MASQUERADE\\n\\nfirewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 0 -i ppp+ -o eth0 -j ACCEPT\\nfirewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 0 -i eth0 -o ppp+ -j ACCEPT\\n\\n# 添加PPTP端口和GRE协议\\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -i eth0 -p tcp --dport 1723 -j ACCEPT\\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p gre -j ACCEPT\\n\\n# 查看服务\\nfirewall-cmd --list-services\\nfirewall-cmd --list-port\\n\\n# 重启防火墙\\nfirewall-cmd --reload\\n```\\n\\n### 2) Iptables\\n``` bash\\n# 添加包转发\\niptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o eth0 -j MASQUERADE\\n\\n# 保存规则\\nservice iptables save\\n```\\n\\n### 配置文件\\n``` bash\\nvi /etc/sysconfig/iptables\\n```\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 47 -j ACCEPT<br>\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 1723 -j ACCEPT<br>\\n-A INPUT -p gre -j ACCEPT<br>\\n<br>\\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited #能链接不能上网问题<br>\\n``` bash\\n# 重启服务\\nservice iptables restart\\nservice pptpd restart\\n```\\n\"","module.exports = \"``` bash\\n#!/bin/bash\\n\\n# 系统环境变量\\nenv\\n# 系统变量和函数\\nset\\n# 树形显示所有进程\\npstree\\n\\n# 自定义变量\\nvi /etc/profile    # 系统环境变量\\nvi /etc/bashrc    # 用户环境变量\\n\\n\\t.bash_profile : 定义了用户的个人化路径与环境变量的文件名称。\\n\\t.bashrc : 该文件包含专用于你的shell的bash信息。\\n\\t.bash_history : 记录命令历史用的。\\n\\t.bash_logout : 当退出shell时,会执行该文件。可以把一些清理的工作放到这个文件中。\\n```\\n\\n## 特殊符号\\n``` bash\\n#!/bin/bash\\n*\\t#代表零个或多个字符或数字。\\n?\\t#只代表一个任意的字符。\\n!\\t#惊叹号通常它代表反逻辑的作用,譬如条件侦测中,用 != 来代表\\\"不等于\\\"。\\n~\\t#用户的家目录,如果是root则是 /root ,普通用户则是 /home/username。\\n#\\t#这个符号在linux中表示注释说明的意思,即”#”后面的内容linux忽略掉。\\n\\\\\\t#脱意字符,将后面的特殊符号(例如”*” )还原为普通字符。\\n|\\t#管道符,前面多次说过,它的作用在于将符号前面命令的结果丢给符号后面的命令。\\n$\\t#除了用于变量前面的标识符外,还有一个妙用,就是和’!’结合起来使用。\\n,\\t#逗点常运用在运算当中当做\\\"区隔\\\"用途。\\n;\\t#不管command1是否执行成功都会执行command2\\n&&\\t#逻辑符号,代表 or 逻辑的符号。\\n||\\t#逻辑符号,代表 and 逻辑的符号。\\n;;\\t#连续分号专用在 case 的选项\\n[]\\t#中括号,中间为字符组合,代表中间字符中的任意一个 如：ls test[a-z]\\n''\\t#被单引号用括住的内容,将被视为单一字串。在引号内的代表变数的$符号,没有作用。\\n\\\"\\\"\\t#被双引号用括住的内容,将被视为单一字串。它防止通配符扩展,但允许变量扩展。\\n``\\t#在倒引号内的 date +%F 会被视为指令,执行的结果会带入 fdv 变数中。fdv=`date +%F`echo \\\\\\\"Today $fdv\\\\\\\"\\n{}\\t#大括号。\\n```\\n\\n### 用法一：通配符扩展\\n``` bash\\n# 创建目录userA-home、userA-bin、userB-home、userB-bin\\nmkdir {userA,userB}-{home,bin}\\n```\\n\\n### 用法二：参数扩展\\n``` bash\\n#!/bin/bash\\n${name:-default}\\t#使用一个默认值(一般是空值)来代替那些空的或者没有赋值的变量name;\\n${name:=default}\\t#使用指定值来代替空的或者没有赋值的变量name;\\n${name:?message}\\t#如果变量为空或者未赋值,那么就会显示出错误信息并中止脚本的执行同时返回退出码1\\n${#name}\\t\\t\\t#给出name的长度\\n${name%word}\\t\\t#从name的尾部开始删除与word匹配的最小部分,然后返回剩余部分\\n${name%%word}\\t\\t#从name的尾部开始删除与word匹配的最长部分,然后返回剩余部分\\n${name#word}\\t\\t#从name的头部开始删除与word匹配的最小部分,然后返回剩余部分\\n${name##word}\\t\\t#从name的头部开始删除与word匹配的最长部分,然后返回剩余部分\\n\\n# 注: name为变量名,word为要匹配的字符串!\\n```\\n\"","import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n\n/* 路由配置 */\nconst routes = [\n  {path:'/', name:'index', component:resolve=>require(['./views/Index.vue'],resolve)},\n  {path:'/project', name:'project', component:resolve=>require(['./views/Project.vue'],resolve)},\n  {path:'/doc', name:'doc', component:resolve=>require(['./views/Doc.vue'],resolve)},\n];\n\n/* 点击相同路由报错问题 */\nconst originalPush = VueRouter.prototype.push\nVueRouter.prototype.push = function push(location) {\n  return originalPush.call(this, location).catch(err => err)\n}\n\n/* 创建路由 */\nconst router = new VueRouter({\n  // mode: 'history',\n  base: process.env.BASE_URL,\n  routes: routes\n})\nexport default router\n","\nimport Env from '@/env'\n\n/* 函数 */\nconst install = (Vue)=>{\n  // 系统标题\n  document.title = Env.title;\n  // 配置信息\n  Vue.prototype.$config = Env;\n  // 全局变量\n  Vue.prototype.$obj = {\n    scan: null,\n    setTime: null,\n    socket: null,\n  };\n  /* 正则验证 */\n  Vue.prototype.$reg = (name,val)=>{\n    let isRight=false;\n    let msg='';\n    const reg = {\n      uname: /^[a-zA-Z][a-zA-Z0-9\\_\\@\\-\\*\\&]{4,15}$/,\n      tel: /^[1]\\d{10}$/,\n      email: /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/,\n      vcode: /^\\d{4}$/,\n      passwd: /^\\w{6,16}$/,\n    }\n    switch(name){\n      case 'uname':\n        isRight = reg.uname.test(val);\n        msg = !isRight?'用户名英文开头5~16位！':'';\n        break;\n      case 'tel':\n        isRight = reg.tel.test(val);\n        msg = !isRight?'手机号码错误！':'';\n        break;\n      case 'email':\n        isRight = reg.email.test(val);\n        msg = !isRight?'邮箱帐号错误！':'';\n        break;\n      case 'vcode':\n        isRight = reg.vcode.test(val);\n        msg = !isRight?'验证码4位！':'';\n        break;\n      case 'passwd':\n        isRight = reg.passwd.test(val);\n        msg = !isRight?'密码为6~16位字符！':'';\n        break;\n    }\n    return isRight?true:msg;\n  }\n  /* 菜单管理 */\n  Vue.prototype.$menus = [\n    // 首页\n    {title:'开发文档',menus:[\n      {title: '使用说明',content: require('./docs/index.md'), menus:[]},\n      {title: '开发工具', menus:[\n        {title: '异步网络通信(Swoole)',content: require('./docs/mvc/libray/swoole.md'), menus:[]},\n        {title: '套接字(Socket)',content: require('./docs/mvc/libray/socket.md'), menus:[]},\n        {title: 'Html5流媒体(Segments)',content: require('./docs/mvc/libray/segments.md'), menus:[]},\n        {title: '图片识别(Tesseract)',content: require('./docs/mvc/libray/tesseract.md'), menus:[]},\n      ]},\n      {title: 'PHP', menus:[\n        {title: 'Composer创建项目',content: require('./docs/mvc/php/composer.md'), menus:[]},\n      ]},\n      {title: 'NodeJS', menus:[\n        {title: 'Vue创建项目',content: require('./docs/mvc/node/vue.md'), menus:[]},\n      ]},\n      {title: 'APP', menus:[\n        {title: 'Vue创建项目',content: require('./docs/mvc/app/flutter.md'), menus:[]},\n      ]},\n      {title: 'C/C++', menus:[\n        {title: 'VSCode',content: require('./docs/mvc/cpp/vscode.md'), menus:[]},\n        {title: 'PHP调用',content: require('./docs/mvc/cpp/auto.md'), menus:[]},\n      ]},\n      {title: 'Python', menus:[\n        {title: '环境搭配',content: require('./docs/mvc/python/install.md'), menus:[]},\n        {title: 'Flask-MVC',content: require('./docs/mvc/python/flask.md'), menus:[]},\n      ]},\n      {title: 'Java', menus:[\n        {title: '环境搭配',content: require('./docs/mvc/java/install.md'), menus:[]},\n        {title: 'SpringBoot',content: require('./docs/mvc/java/springboot.md'), menus:[]},\n      ]},\n      {title: 'Flutter', menus:[\n        {title: '环境搭配',content: require('./docs/mvc/app/flutter.md'), menus:[]},\n      ]},\n    ]},\n    // Linux文档\n    {title:'Linux文档',menus:[\n      {title: 'Shell', menus:[\n        {title: '基础语法',content: require('./docs/linux/shell/index.md'), menus:[]},\n        {title: '常用工具',content: require('./docs/linux/shell/tools.md'), menus:[]},\n        {title: 'MariaDB数据库',content: require('./docs/linux/shell/mysql.md'), menus:[]},\n        {title: 'Docker容器',content: require('./docs/linux/shell/docker.md'), menus:[]},\n        {title: 'Nginx负载均衡',content: require('./docs/linux/shell/nginx.md'), menus:[]},\n        {title: 'Redis消息列队',content: require('./docs/linux/shell/redis.md'), menus:[]},\n      ]},\n      {title: 'Server', menus:[\n        {title: 'SSL免费证书',content: require('./docs/linux/server/ssl.md'), menus:[]},\n        {title: 'FTP服务器(虚拟用户)',content: require('./docs/linux/server/ftp.md'), menus:[]},\n        {title: 'SVN服务器',content: require('./docs/linux/server/svn.md'), menus:[]},\n        {title: 'GIT服务器',content: require('./docs/linux/server/git.md'), menus:[]},\n        {title: 'VPN服务器',content: require('./docs/linux/server/vpn.md'), menus:[]},\n        {title: 'DHCP服务器',content: require('./docs/linux/server/dhcp.md'), menus:[]},\n        {title: 'PPPOE服务器',content: require('./docs/linux/server/pppoe.md'), menus:[]},\n      ]},\n      {title: 'CentOS', menus:[\n        {title: '基础配置',content: require('./docs/linux/centos/index.md'), menus:[]},\n        {title: '防火墙',content: require('./docs/linux/centos/firewall.md'), menus:[]},\n        {title: 'Nginx+PHP+Mariadb',content: require('./docs/linux/centos/nginx.md'), menus:[]},\n        {title: 'Sendmail发邮件',content: require('./docs/linux/centos/sendmail.md'), menus:[]},\n      ]},\n      {title: 'Ubuntu', menus:[\n        {title: '基础配置',content: require('./docs/linux/ubuntu/index.md'), menus:[]},\n        {title: '防火墙',content: require('./docs/linux/ubuntu/firewall.md'), menus:[]},\n      ]},\n      {title: 'ArchLinux', menus:[\n        {title: '基础配置',content: require('./docs/linux/archlinux/index.md'), menus:[]},\n        {title: '安装 & Windows 双系统',content: require('./docs/linux/archlinux/install.md'), menus:[]},\n        {title: '桌面和常用软件',content: require('./docs/linux/archlinux/gnome.md'), menus:[]},\n        {title: 'Nginx+PHP+Mariadb',content: require('./docs/linux/archlinux/nginx.md'), menus:[]},\n        {title: 'Sublime3+Gnome3中文输入',content: require('./docs/linux/archlinux/sublime.md'), menus:[]},\n        {title: 'Cordova安装配置',content: require('./docs/linux/archlinux/cordova.md'), menus:[]},\n      ]},\n    ]},\n  ];\n}\nexport default install;","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{staticClass:\"top_html\"},[_c('div',{staticClass:\"body flex\"},[_c('div',{staticClass:\"flex\"},[_vm._m(0),_c('ul',{staticClass:\"top_nav flex\"},[_c('li',[_c('router-link',{class:_vm.$route.path=='/'?'an':'',attrs:{\"to\":\"/\"}},[_vm._v(\"首页\")])],1),_c('li',[_c('router-link',{class:_vm.$route.path=='/doc'?'an':'',attrs:{\"to\":\"/doc\"}},[_vm._v(\"文档\")])],1)])]),_vm._m(1)])]),_c('router-view'),_c('div',{staticClass:\"bottom_copy\"},[_vm._v(\"WebMIS © 2019-2022 备案号: 滇ICP备14000710号\")])],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"flex top_logo\"},[_c('h1',[_vm._v(\"W\")]),_c('h2',[_vm._v(\"EBMIS\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('a',{attrs:{\"href\":\"https://github.com/webmiss/base\"}},[_vm._v(\"Github\")])])}]\n\nexport { render, staticRenderFns }","export default {\n  data(){\n    return {\n      \n    }\n  },\n  mounted(){\n    // 背景\n    document.body.style.backgroundColor=\"#2B3137\";\n    document.body.style.backgroundImage = 'url('+require('./assets/images/bg.svg')+')';\n  },\n  methods:{\n  }\n}","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!./App.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!./App.js?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=248d80ed&\"\nimport script from \"./App.js?vue&type=script&lang=js&\"\nexport * from \"./App.js?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport router from './router'\n\nimport Config from './config'\nimport axios from 'axios'\nimport QRCode from 'qrcode'\n\n// UI\nimport ElementUI from 'element-ui'\nimport './assets/theme/index.css'\nimport App from './App.vue'\n\n// 配置\nVue.config.productionTip = false;\nVue.use(Config);\nVue.use(ElementUI);\n\n// 全局注册\nVue.prototype.$ajax = axios;\nVue.prototype.$storage = window.localStorage;\nVue.prototype.$qrcode = QRCode;\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n\n/* 用户点击播放问题 */\ndocument.body.ontouchstart = ()=>{\n  try{\n    if(plus.os.name!='iOS') document.createElement('audio');\n  }catch(e){\n    document.createElement('audio');\n  }\n}","module.exports = \"## 1. Nginx反向代理和负载均衡\\n使用代理服务器可以将请求转发给内部的Web服务器，使用这种加速模式显然可以提升静态网页的访问速度。因此也可以考虑使用这种技术，让代理服务器将请求均匀转发给多台内部Web服务器之一上，从而达到负载均衡的目的。这种代理方式与普通的代理方式有所不同，标准代理方式是客户使用代理访问多个外部Web服务器，而这种代理方式是多个客户使用它访问内部Web服务器，因此也被称为反向代理模式。\\n### 1.1 配置主WEB服务器\\n```bash\\nvi /home/vhosts/default.conf\\n```\\n**配置内容**\\n```nginx\\n# 设定负载均衡的服务器列表\\nupstream webservice {\\n    # weight为权重值\\n    server 127.0.0.1:8081 weight=3;\\n    server 127.0.0.1:8082 weight=3;\\n    server 127.0.0.1:8083 weight=3;\\n}\\n\\nserver {\\n    listen       80 default_server;\\n    server_name  localhost;\\n    root /home/www/;\\n    index index.php;\\n\\n    charset utf-8;\\n    #access_log  /var/log/nginx/host.access.log  main;\\n\\n    location / {\\n        # 反向代理\\n        proxy_pass  http://webservice;\\n        # 相关配置\\n        proxy_redirect     off;\\n        proxy_set_header   Host             $host;\\n        proxy_set_header   X-Real-IP        $remote_addr;\\n        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\\n        proxy_max_temp_file_size 0;\\n        proxy_connect_timeout      90;\\n        proxy_send_timeout         90;\\n        proxy_read_timeout         90;\\n        proxy_buffer_size          4k;\\n        proxy_buffers              4 32k;\\n        proxy_busy_buffers_size    64k;\\n        proxy_temp_file_write_size 64k;\\n    }\\n}\\n```\\n**重启Nginx**\\n```bash\\nsystemctl restart nginx\\n```\\n\\n### 1.2 脚本测试( test.sh )\\n```bash\\n#!/bin/bash\\nfor((i=1;i<=1000;i++));\\ndo\\ncurl http://localhost:80\\ndone\\n```\\n**执行脚本**\\n```bash\\nsh test.sh\\n```\"","module.exports = \"## Redis\\nredis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。\\n\\n### 1.1 安装\\n```bash\\n# CentOS7 PHP7\\nyum install redis php72w-pecl-redis -y\\n\\n# 创建目录\\nmkdir /home/www/mvc/redis/\\n\\n# PHP模块信息\\necho '<?php phpinfo();?>' > /home/www/mvc/redis.php\\n\\n# 开机启动\\nsystemctl enable redis\\n\\n# 重启PHP和Redis\\nsystemctl restart php-fpm redis\\n```\\n\\n### 远程访问（vi /etc/redis.conf）\\n```bash\\n# bind 127.0.0.1\\nprotected-mode no\\n```\\n\\n### 1.2 使用\\n```bash\\n# 登录\\nredis-cli -h 127.0.0.1 -p 6379 --raw\\n# 是否运行\\nping\\n# 查看信息\\ninfo\\n# 设置密码\\nconfig set requirepass PWD\\n# 密码验证\\nauth PWD\\n# 退出\\nexit\\n```\\n\\n### 键(key)值(value)\\n```bash\\n# 添加\\nset Test\\n# 查询\\nget Test\\n# 删除\\ndel Test\\n```\\n\\n### 哈希(Hash)\\n```bash\\n# 添加\\nhmset Student name '张三' age 25\\n# 查询\\nhgetall Student\\n# 删除\\ndel Student\\n```\\n\\n### 列表(List)\\n```bash\\n# 添加\\nlpush Student '张三' '李四'\\n# 查询\\nlrange Student 0 10\\n# 删除\\ndel Student\\n```\\n\\n### 集合(Set)\\n```bash\\n# 添加\\nsadd Student '张三' '李四'\\n# 查询\\nsmembers Student\\n# 删除\\ndel Student\\n```\\n\\n### 有序集合(sorted set)\\n```bash\\n# 添加\\nzadd Student 1 '张三' 2 '李四'\\n# 查询\\nzrange Student 0 10 withscores\\n# 删除\\ndel Student\\n```\\n\\n## 案例\\n\\n### 1.1 向列队中添加数据( redis.php )\\n```php\\n// 接收参数\\n$num=$_GET['num']?$_GET['num']:100;\\naddData($num);\\n\\n/* 向列队中添加数据 */\\nfunction addData($num=1000){\\n    $redis=new Redis();\\n    // 打开\\n    $redis->connect('127.0.0.1',6379);\\n    echo \\\"Redis: \\\".$redis->ping();\\n    // 随机生成消息\\n    for ($i=0; $i<$num; $i++) {\\n        $data=['id'=>$i+1,'str'=>md5(mt_rand(2,2000))];\\n        $redis->rPush('msg',json_encode($data));\\n    }\\n    // 关闭\\n    $redis->close();\\n    return true;\\n}\\n```\\n\\n### 1.2 执行列队( msg.php )\\n```php\\n$redis=new Redis();\\n// 连接\\n$redis->connect('127.0.0.1',6379);\\n// 阻塞设置超时时间为3秒\\nwhile($task=$redis->blPop(array('msg'),3)){\\n    $msg=json_decode($task[1],true);\\n    echo $msg['id'].': '.$msg['str'].'<br>';\\n}\\n```\"","module.exports = \"## 一、安装JAVA环境( jdk )\\n```bash\\npacman -S jdk\\n```\\n### 环境变量\\n```bash\\nvi /etc/profile\\n```\\n- export JAVA_HOME=/usr/lib/jvm/java-11-jdk\\n- export JRE_HOME=$JAVA_HOME/jre\\n- export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\\n\\n### 刷新\\n```bash\\nsource /etc/profile\\n```\\n### 创建链接\\n```bash\\nln -sf /usr/lib/jvm/java-10-jdk /usr/lib/jvm/default\\nln -sf /usr/lib/jvm/java-10-jdk/jre /usr/lib/jvm/default-runtime\\n```\\n### 查看版本\\n```bash\\njavac --version\\njava --version\\n```\\n\\n## 二、安装Android( SDK )\\n```bash\\nhttp://www.androiddevtools.cn/\\n```\\n### 环境变量\\n```bash\\nvi /etc/profile\\n```\\n- export ANDROID_HOME=/opt/android-sdk-linux\\n- export PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH\\n\\n### 测试\\n```bash\\n# 刷新\\nsource /etc/profile\\n# 查看\\nandroid\\n```\\n\\n## 三、安装Flutter\\n```bash\\npacman -S flutter\\n```\\n### 依赖检查\\n```bash\\nflutter doctor\\n```\\n\\n## 四、模拟器Genymotion\\n```bash\\npacman -S genymotion\\n```\\n\\n## 五、VSCode调试\\n### 安装插件( ctrl+shift+p )\\n```bash\\n> Install Extensions > Flutter\\n```\\n\\n### 依赖检查( ctrl+shift+p )\\n```bash\\n> Run Flutter Doctor\\n```\\n\\n### 创建应用( ctrl+shift+p )\\n```bash\\n> Flutter: New Project\\n```\"","module.exports = \"## 一、安装JAVA环境( jdk )\\n```bash\\npacman -S jdk\\n```\\n### 环境变量\\n```bash\\nvi /etc/profile\\n```\\n- export JAVA_HOME=/usr/lib/jvm/java-11-jdk\\n- export JRE_HOME=$JAVA_HOME/jre\\n- export WORKS=/home/kingsoul/works\\n- export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib:$WORKS/tomcat9/lib/servlet-api.jar:$WORKS/www/java\\n- export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\\n\\n### 刷新\\n```bash\\nsource /etc/profile\\n```\\n### 创建链接\\n```bash\\nln -sf /usr/lib/jvm/java-10-jdk /usr/lib/jvm/default\\nln -sf /usr/lib/jvm/java-10-jdk/jre /usr/lib/jvm/default-runtime\\n```\\n### 查看版本\\n```bash\\njavac --version\\njava --version\\n```\\n## 二、下载Tomcat\\n```bash\\n# 进入目录\\ncd tomcat9/bin\\n# 启动\\n./startup.sh\\n# 停止\\n./shutdown.sh\\n```\\n## 三、Servlet服务\\n```bash\\n# Java项目\\ncd $HOME/works/www/java\\n```\\n### HelloWorld.java\\n```java\\nimport java.io.*;\\nimport javax.servlet.*;\\nimport javax.servlet.http.*;\\n\\npublic class HelloWorld extends HttpServlet {\\n    private String message;\\n    // 初始化\\n    public void init() throws ServletException{\\n        message = \\\"Hello World\\\";\\n    }\\n    // GET请求\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        response.setContentType(\\\"text/html\\\");\\n        PrintWriter out = response.getWriter();\\n        out.println(\\\"<h1>\\\" + message + \\\"</h1>\\\");\\n    }\\n    // 析构函数\\n    public void destroy(){\\n    }\\n}\\n```\\n### 编译\\n```bash\\njavac HelloWorld.java\\n```\\n- 将Servlet包加入CLASSPATH\\n- 将项目目录加入CLASSPATH\\n\\n## 四、Servlet 部署\\n```bash\\n# Tomcat网站根目录\\ncd webapps/ROOT\\n# Java项目类\\nmkdir WEB-INF/classes\\n```\\n### WEB-INF/web.xml\\n```xml\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<web-app>\\n\\n    <servlet>\\n        <servlet-name>HelloWorld</servlet-name>\\n        <servlet-class>HelloWorld</servlet-class>\\n    </servlet>\\n    <servlet-mapping>\\n        <servlet-name>HelloWorld</servlet-name>\\n        <url-pattern>/HelloWorld</url-pattern>\\n    </servlet-mapping>\\n\\n</web-app>\\n```\\n\\n\"","module.exports = \"## 一、安装MariaDB\\n``` bash\\npacman -S mariadb\\nmysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\\nsystemctl start mysqld\\n```\\n### 设置root密码\\n``` bash\\nmysql_secure_installation\\n```\\n### 允许远程访问\\n``` bash\\nmysql -u root -p\\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION;\\nflush privileges;\\n```\\n\\n## 二、安装Nginx\\n``` bash\\npacman -S nginx\\nsystemctl start nginx\\n```\\n\\n\\n## 三、安装PHP\\n``` bash\\npacman -S php-fpm\\nsystemctl start php-fpm\\n```\\n### 配置PHP( /etc/php/php.ini )\\n``` bash\\n# CGI\\ncgi.fix_pathinfo=0\\n# 数据库\\nextension=mysqli\\nextension=pdo_mysql\\n# 时区\\ndate.timezone = \\\"Asia/Shanghai\\\"\\n# 加速 PHP\\nzend_extension=opcache\\nopcache.enable=1\\nopcache.enable_cli=1\\nopcache.file_cache=/tmp\\n```\\n### 配置PHP-FPM( vi /etc/php/php-fpm.d/www.conf )\\n``` bash\\n# 系统用户\\nuser = webmis\\ngroup = webmis\\n# 链接方式\\n;listen = /run/php-fpm/php-fpm.sock\\nlisten = 127.0.0.1:9000\\n```\\n重启PHP\\n``` bash\\nsystemctl start php-fpm\\n```\\n\\n## 四、配置Nginx( /etc/nginx/nginx.conf )\\n``` bash\\n # 403拒绝访问问题\\nuser root(系统用户名);\\nhttp {\\n\\tkeepalive_timeout  65;\\n\\n\\t#gzip  on;\\n\\n\\t#vhost\\n\\tinclude /home/webmis/works/vhosts/*.conf;\\n\\n\\t# 导入数据库文件限制\\n\\tclient_max_body_size 150m;\\n}\\n```\\n### 配置虚拟主机\\n``` bash\\nmkdir -p /home/webmis/works/vhosts/\\nvi /home/webmis/vhosts/webmis.conf\\n```\\n**文件内容**\\n``` bash\\n# nginx\\nserver {\\n\\tlisten 80 default_server;\\n\\tserver_name localhost;\\n\\troot '/home/webmis/www/';\\n\\tindex index.php index.html;\\n\\n\\t# 目录预览\\n\\tautoindex on;\\n\\tautoindex_exact_size off;\\n\\tautoindex_localtime on;\\n\\n\\tlocation /{\\n\\t}\\n\\n\\t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n\\tlocation ~ \\\\.php$ {\\n\\t\\t#fastcgi_pass   unix:/run/php-fpm/php-fpm.sock;\\n\\t\\tfastcgi_pass 127.0.0.1:9000;\\n\\t\\tfastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\\n\\t\\tinclude        fastcgi_params;\\n\\t}\\n\\t# deny access to .htaccess files, if Apache's document root\\n\\tlocation ~ /\\\\.ht {\\n\\t\\tdeny all;\\n\\t}\\n}\\n```\\n\\n## 五、安装phpMyAdmin\\n``` bash\\npacman -S phpmyadmin\\n```\\n**虚拟主机**\\n``` bash\\n# nginx\\nserver {\\n\\tlisten       8082;\\n\\tserver_name  localhost;\\n\\troot /usr/share/webapps/phpMyAdmin;\\n\\tindex index.php index.html;\\n\\n\\tlocation / {\\n\\t}\\n\\n\\t# redirect server error pages to the static page /50x.html\\n\\t#\\n\\terror_page   500 502 503 504  /50x.html;\\n\\tlocation = /50x.html {\\n\\t\\troot   /usr/share/nginx/html;\\n\\t}\\n\\n\\t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n\\t#\\n\\tlocation ~ \\\\.php$ {\\n\\t\\t#fastcgi_pass   unix:/run/php-fpm/php-fpm.sock;\\n\\t\\tfastcgi_pass   127.0.0.1:9000;\\n\\t\\tfastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\\n\\t\\tinclude        fastcgi_params;\\n\\t}\\n\\t# deny access to .htaccess files, if Apache's document root\\n\\t# concurs with nginx's one\\n\\t#\\n\\tlocation ~ /\\\\.ht {\\n\\t\\tdeny  all;\\n\\t}\\n}\\n```\\n重启Nginx\\n``` bash\\nsystemctl restart nginx\\n```\\n注意： 访问 http://localhost:8082/setup 进行配置\\n\\n\\n\"","module.exports = \"## 安装Node\\n```bash\\n# 安装\\npacman -S nodejs npm\\n# 修改权限\\nchmod -R 777 /usr/lib/node_modules/\\n```\\n## 淘宝镜像\\n```bash\\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\\n```\\n\\n## 安装Vue-cli\\n```bash\\n# v2\\ncnpm install -g vue-cli\\n# v3\\ncnpm install -g @vue/cli\\n```\\n\\n## 创建项目( v2 )\\n```bash\\nvue init webpack demo\\n```\\n- ? Project name (demo) \\n- ? Project description (A Vue.js project)\\n- ? Author (webmiss <klingsoul@163.com>) \\n- ? Vue build **standalone**\\n- ? Install vue-router? **Yes**\\n- ? Use ESLint to lint your code? **No**\\n- ? Set up unit tests No\\n- ? Setup e2e tests with Nightwatch? **No**\\n- ? Should we run `npm install` for you after the project has been created? (recommended) **no**\\n\\n##  创建项目( v3 )\\n```bash\\nvue create demo\\n```\\n- ? Please pick a preset: Manually select features\\n- ? Check the features needed for your project: \\n- ◉ Babel\\n- ◯ TypeScript\\n- ◯ Progressive Web App (PWA) Support\\n- ◉ Router\\n- ◉ Vuex\\n- ◯ CSS Pre-processors\\n- ◉ Linter / Formatter\\n- ◯ Unit Testing\\n- ◯ E2E Testing\\n- ? Use history mode for router?Yes\\n- ? Pick a linter / formatter config: Basic\\n- ? Pick additional lint features: Lint on save\\n- ? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files\\n\\n### 配置文件( vue.config.js )\\n```bash\\nmodule.exports = {\\n    baseUrl: process.env.NODE_ENV === 'production' ? './' : '/',\\n    productionSourceMap: true,\\n}\\n```\\n\\n## 运行\\n```bash\\n# 项目\\ncd demo\\n# 安装依赖\\ncnpm install\\n# 运行(cli2\\\\cli3)\\nnpm run dev\\nnpm run serve\\n# 打包\\nnpm run build\\n```\\n\\n## AJAX\\n```bash\\n# 安装\\ncnpm install axios -S\\n```\\n\\n## Vue-Ydui\\n```bash\\n# 插件\\ncnpm install vue-ydui -S\\n# 使用\\nimport 'vue-ydui/dist/ydui.base.css';\\nimport {Button, ButtonGroup} from 'vue-ydui/dist/lib.rem/button';\\n\\nexport default {\\n    components: {\\n      [Button.name]: Button,\\n    },\\n}\\n```\\n\\n## Muse-UI\\n```bash\\n# 插件\\ncnpm install muse-ui -S\\n# 使用\\nimport 'muse-ui/dist/muse-ui.css';\\nimport MuseUI from 'muse-ui';\\nVue.use(MuseUI);\\n# 定义主题\\nimport theme from 'muse-ui/lib/theme'\\nVue.use(MuseUI);\\ntheme.add('teal', {\\n  primary: '#FF6600',\\n  secondary: '#ff4081',\\n  success: '#4caf50',\\n  warning: '#ffeb3b',\\n}, 'light');\\ntheme.use('teal');\\n```\\n\\n## Cube-UI( cli3 )\\n```bash\\n# 安装\\nvue add cube-ui\\n# 使用\\nimport { Button } from \\\"cube-ui\\\";\\n\\nexport default {\\n    components: {\\n      [Button.name]: Button,\\n    },\\n}\\n```\\n\\n## Mand-Mobile( cli3 )\\n```bash\\n# 插件\\ncnpm install vue-cli-plugin-mand -D\\n# 安装\\nvue invoke mand\\n# 使用\\nimport \\\"normalize.css\\\";\\nimport 'mand-mobile/lib/mand-mobile.css'\\n\\nimport { Button } from \\\"mand-mobile\\\";\\n\\nexport default {\\n    components: {\\n      [Button.name]: Button,\\n    },\\n}\\n```\\n\\n## ElementUI\\n```bash\\n# 安装\\ncnpm install element-ui -S\\n```\\n\\n## 阿里G2( 图表 )\\n```bash\\n# 安装\\ncnpm install g2 -S\\n# 使用\\nimport G2 from 'g2'\\n```\\n\\n## 字体图标\\n```bash\\n# 安装\\ncnpm install font-awesome -S\\n```\\n文档：http://fontawesome.dashgame.com/\\n\\n### 引入( main.js )\\n```javascript\\nimport Vue from 'vue'\\nimport App from './App.vue'\\nimport router from './router'\\nimport store from './store'\\nimport axios from 'axios'\\nimport FastClick from 'fastclick'\\n\\n// 注册函数\\nVue.prototype.$ajax = axios\\n// 配置\\nVue.config.productionTip = false\\n// APP click点击延迟问题\\nFastClick.attach(document.body)\\n\\nnew Vue({\\n  router,\\n  store,\\n  render: h => h(App)\\n}).$mount('#app')\\n```\\n\\n## 自定义属性、函数\\n### library/inc.js\\n```javascript\\n/* 公共文件 */\\nexports.install = function (Vue, options) {\\n    // 全局变量\\n    Vue.prototype.inc = {\\n        version:'1.0.0',\\n        baseUrl:'http://localhost:8080/',\\n        test(){\\n            console.log('Test');\\n        }\\n    }\\n}\\n```\\n### main.js\\n```javascript\\nimport Inc from './library/inc'\\n\\nVue.use(Inc)\\n```\\n### Index.vue\\n```javascript\\nmounted(){\\n        console.log('构造函数');\\n        console.log(this.inc);\\n        this.inc.test();\\n},\\n```\\n\\n## 打包事项\\n### 编辑文件( build/utils.js )\\n```javascript\\nif (options.extract) {\\n\\treturn ExtractTextPlugin.extract({\\n\\t\\tuse: loaders,\\n\\t\\tfallback: 'vue-style-loader',\\n\\t\\tpublicPath: '../../'\\n\\t})\\n} else {\\n\\treturn ['vue-style-loader'].concat(loaders)\\n}\\n```\\n### 编辑文件( config/index.js )\\n```javascript\\nbuild: {\\n\\tindex: path.resolve(__dirname, '../dist/index.html'),\\n\\tassetsRoot: path.resolve(__dirname, '../dist'),\\n\\tassetsSubDirectory: 'static',\\n\\tassetsPublicPath: './',\\n}\\n```\\n\\n## Vue项目拷贝问题\\n### 新建文件( postcss.config.js )\\n```javascript\\nmodule.exports = {\\n    plugins: {\\n        'autoprefixer': {},\\n    }\\n}\\n```\"","module.exports = \"## LetsEncrypt免费证书\\n``` bash\\n# Epel源\\nyum install epel-release\\n# 证书工具\\nyum install certbot python2-certbot-nginx\\n# pyOpenSSL错误、urllib3错误\\npip install --upgrade --force-reinstall 'requests==2.6.0'\\npip install --upgrade urllib3\\n# 自动安装证书(不能使用中文)\\ncertbot --nginx\\n```\\n\\n## Nginx配置\\n``` nginx\\n# Nginx\\nserver {\\n    listen 80;\\n    server_name webmis.vip www.webmis.vip;\\n\\n    location / {\\n        rewrite ^(.*) https://$server_name$1 permanent;\\n    }\\n}\\nserver {\\n    listen       443 http2 ssl;\\n    server_name  www.webmis.vip webmis.vip;\\n    set $root_path /home/www/base/web/dist/;\\n    root $root_path;\\n    index index.html;\\n\\n    #SSL\\n    ssl on;\\n    ssl_certificate /etc/letsencrypt/live/webmis.vip/fullchain.pem;\\n    ssl_certificate_key /etc/letsencrypt/live/webmis.vip/privkey.pem;\\n\\n    charset utf-8;\\n\\n    location / {\\n    }\\n\\n    # deny access to .htaccess files, if Apache's document root\\n    # concurs with nginx's one\\n    #\\n    location ~ /\\\\.ht {\\n        deny  all;\\n    }\\n}\\n```\\n\\n## 自动生成\\n``` bash\\ncertbot --nginx\\n```\\n\\n## 手动生成证书\\n``` bash\\ncertbot certonly --webroot --email admin@webmis.vip -w /home/www/webmis/public/ -d webmis.vip -d www.webmis.vip\\n```\\n注意：执行此命令后会生成证书, 保存在 /etc/letsencrypt/live 中对应的域名目录下面。\\n- cert.pem # Apache服务器端证书\\n- chain.pem # Apache根证书和中继证书\\n- fullchain.pem # Nginx所需要ssl_certificate文件\\n- privkey.pem #安全证书KEY文件\\n\\n## 定时续期证书\\n``` bash\\n# crontab -e\\n0 2 28 * * certbot renew --quiet && systemctl restart nginx 2>&1\\n```\\n每月28号2点更新证书后重启Nginx\\n\\n### 其他\\n``` bash\\n# 测试续期\\ncertbot renew --dry-run\\n\\n# 禁止输出信息\\ncertbot renew --quiet\\n```\\n\"","module.exports = \"## EFI启动模式\\n``` bash\\n1) 电脑启动模式设置成“UEFI Mode”\\n2) 禁用安全启动(Secure Boot)\\n```\\n\\n## 安装win10\\n```选择“自定义安装”创建C盘为50GB，系统会自动创建128MB引导分区```\\n\\n## 安装Archlinux\\n``` bash\\n# 1) 下载ISO文件：https://www.archlinux.org/download/\\n# 2) Linux下用DD命令制作U盘启动盘(win下直接拷贝ISO里的文件）\\ndd if=xxx.iso of=/dev/sdb bs=1M && sync\\n# 恢复U盘容量\\ndd if=/dev/zero of=/dev/sdb bs=1M count=1\\n# 3) 打开loader\\\\entries\\\\archiso-x86_64.conf\\n# 将ARCH_201603换成U盘分区的卷名(分区名)\\n```\\n\\n### GPT分区\\n``` bash\\nparted /dev/sda\\n\\n# 建立GPT分区表(MBR msdos)\\nmklabel gpt\\n\\n# 建立ESP分区\\nmkpart primary 2048s  512M\\n\\n# 标志为boot\\nset 1 boot on\\n\\n# 退出\\nq\\n```\\n\\n### linux分区(MBR : cfdisk、fdisk; GPT : fdisk)\\n``` bash\\nfdisk -l\\n```\\n设备 起点 末尾 扇区 大小 类型<br>\\n/dev/sda1 2048 1050623 1048576 100M EFI 系统<br>\\n/dev/sda2 609230848 609640447 409600 200M Linux /boot<br>\\n/dev/sda3 609640448 618029055 8388608 4G Linux swap<br>\\n/dev/sda4 618029056 659972095 41943040 20G Linux /<br>\\n/dev/sda5 659972096 976773134 316801039 151.1G Linux /home<br>\\n\\n### 格式化分区(注意根据自己的事实分区操作)\\n``` bash\\n# 格式化\\nmkfs -t ext4 /dev/sda2\\nmkfs -t ext4 /dev/sda4\\nmkfs -t ext4 /dev/sda5\\n\\n# 如果是自己创建的EFI分区\\nmkfs -t vfat /dev/sda1\\n\\n# 交换分区\\nmkswap /dev/sda3\\nswapon /dev/sda3\\n```\\n\\n### 挂载(/、boot、home)\\n``` bash\\n# 挂载\\nmount /dev/sda4 /mnt\\nmkdir /mnt/boot && mount /dev/sda2 /mnt/boot\\nmkdir /mnt/home && mount /dev/sda5 /mnt/home\\n\\n# 如果是EFI(需要把EFI分区挂载到boot目录下)\\nmkdir /mnt/boot/efi && mount /dev/sda1 /mnt/boot/efi\\n```\\n\\n### 编辑更新源\\n``` bash\\nvi /etc/pacman.d/mirrorlist\\n```\\nServer = http://mirrors.aliyun.com/archlinux/$repo/os/$arch\\n\\n## 一、安装基本系统\\n``` bash\\npacstrap /mnt base\\n```\\n\\n### 生成磁盘挂载列表\\n``` bash\\ngenfstab -U -p /mnt >> /mnt/etc/fstab\\n```\\n\\n### 进入新系统\\n``` bash\\narch-chroot /mnt\\n```\\n\\n## 二、基础配置\\n``` bash\\n# 添加主机名\\necho \\\"Test\\\" > /etc/hostname\\n\\n# 键盘映射和字体\\necho KEYMAP=us > /etc/vconsole.conf\\n\\n# 时区\\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\\n# 硬件时钟同步\\nhwclock --systohc --utc\\n\\n# 字符编码\\necho LANG=en_US.UTF-8 > /etc/locale.conf\\nvi /etc/locale.gen\\n\\ten_US.UTF8 UTF-8\\n\\tzh_CN.UTF8 UTF-8\\n# 更新编码\\nlocale-gen\\n```\\n\\n## 三、启动管理器\\n### 普通模式\\n``` bash\\n# 安装Grub2\\npacman -S grub os-prober\\n# 安装到sda\\ngrub-install --target=i386-pc /dev/sda\\ngrub-mkconfig -o /boot/grub/grub.cfg\\n```\\n### EFI模式\\n``` bash\\n# 安装Grub2\\npacman -S grub efibootmgr dosfstools\\n# 安装到sda\\ngrub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Arch_Grub --recheck\\ngrub-mkconfig -o /boot/grub/grub.cfg\\n```\\n\\n## 四、完成\\n### 设置root密码\\n``` bash\\npasswd root\\n```\\n### 卸载被挂载的分区\\n``` bash\\n# 退出系统\\nexit\\n# 取消挂载\\numount /mnt/boot/efi\\numount /mnt/{boot,home,}\\n# 重启\\nreboot\\n```\\n\"","/* 配置文件 */\n// const baseUrl = 'http://localhost:8083/';\nconst baseUrl = 'https://api.webmis.vip/';\nexport default {\n  title: 'WebMIS',\n  version: 'v1.0.0',\n  baseUrl: baseUrl,\n  apiUrl: baseUrl+'',\n  themeColor: '#6FB737',\n  copy: 'Copyright © WebMIS.VIP 2019',\n  // 地图\n  amapKey: 'd956f0c3e15489a1b5bf291e5d133c8a',\n}","module.exports = \"## 修复Grub2引导（重装windows无法启动Linux问题）\\n``` bash\\n# 查看分区\\ngrub rescue> ls\\n\\n# Grub目录\\ngrub rescue> ls (hd0,gpt8)/boot/grub\\n\\n# 调出启动菜单（boot分区到gpt8）\\ngrub rescue> root=(hd0,gpt8)\\ngrub rescue> prefix=(hd0,gpt8)/grub\\ngrub rescue> set root=(hd0,gpt8)\\ngrub rescue> set prefix=(hd0,gpt8)/grub\\ngrub rescue> insmod normal\\ngrub rescue> normal\\n```\\n\\n### 修复引导\\n``` bash\\n# 进入系统后\\n\\n# 1) BIOS启动模式\\ngrub-install --target=i386-pc /dev/sda\\ngrub-mkconfig -o /boot/grub/grub.cfg\\n\\n# 2) EFI启动模式\\ngrub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Arch_Grub --recheck\\ngrub-mkconfig -o /boot/grub/grub.cfg\\n\\n# 3) MBR引导\\nmenuentry \\\"Windows 7\\\" {\\n\\tinsmod ntfs\\n\\tset root=(hd0,1)\\n\\tchainloader +1\\n}\\n\\n# 4) GPT引导\\nmenuentry \\\"Windows 10\\\" {\\n\\tsearch --file --no-floppy --set=root /EFI/Microsoft/Boot/bootmgfw.efi\\n\\tchainloader (${root})/EFI/Microsoft/Boot/bootmgfw.efi\\n}\\n```\\n\\n## 效应时间\\n``` bash\\ntimedatectl set-ntp true\\n```\\n\"","module.exports = \"## 1) 安装\\n``` bash\\n# CentOS\\nyum install dhcp dhcp-devel\\n```\\n\\n## 2) 配置\\n``` bash\\n# 拷贝配置文件\\ncp /usr/share/doc/dhcp*/dhcpd.conf.sample /etc/dhcp/dhcpd.conf\\n# 编辑\\nvi /etc/dhcp/dhcpd.conf\\n```\\n\\n### 文件内容\\n``` bash\\n# 动态 IP 分配\\nsubnet 192.168.1.0 netmask 255.255.255.0 {\\n\\trange 192.168.1.10 192.168.1.240;\\t\\t# IP地址范围\\n\\toption domain-name-servers 211.98.72.7,211.98.72.8; # DNS1,DNS2\\n\\toption routers 192.168.1.1;\\t\\t\\t# 网关\\n\\tdefault-lease-time 21600;\\t\\t\\t# 预设的租约时间,单位：秒\\n\\tmax-lease-time 43200;\\t\\t\\t\\t# 超过租约时间还可续约,最长 518400 秒\\n}\\n# 外网不能动态获取\\nsubnet 222.56.42.0 netmask 255.255.255.0 {}\\n```\\n\\n## 3) 启动DHCP服务\\n``` bash\\n# CentOS 7\\nsystemctl enable dhcpd\\nsystemctl start dhcpd\\n\\n# CentOS 6\\nchkconfig --levels 235 dhcpd on\\nservice dhcpd start\\n```\\n\\n## 4) 查看租约信息\\n``` bash\\ncat /var/lib/dhcpd/dhcpd.leases\\n```\"","module.exports = \"## 一、Github创建项目克隆\\n``` bash\\ngit clone https://github.com/webmiss/framework\\n```\\n\\n## 二、Composer创建项目\\n``` bash\\n# 项目目录\\ncd framework\\n# 配置向导\\ncomposer init\\n```\\n- Package name (<vendor>/<name>) [kingsoul/framework]: webmiss/framework\\n- Description []: The Webmis Framework\\n- Author [webmiss <klingsoul@163.com>, n to skip]: \\n- Minimum Stability []: dev\\n- Package Type (e.g. library, project, metapackage, composer-plugin) []: library\\n- License []: MIT\\n\\n### composer.json\\n``` json\\n{\\n    \\\"name\\\": \\\"webmiss/framework\\\",\\n    \\\"description\\\": \\\"The Webmis Framework\\\",\\n    \\\"type\\\": \\\"library\\\",\\n    \\\"license\\\": \\\"MIT\\\",\\n    \\\"authors\\\": [\\n        {\\n            \\\"name\\\": \\\"webmis\\\",\\n            \\\"email\\\": \\\"klingsoul@163.com\\\"\\n        }\\n    ],\\n    \\\"minimum-stability\\\": \\\"dev\\\",\\n    \\\"require\\\": {\\n        \\\"php\\\": \\\"^5.4 || ^7.0\\\"\\n    },\\n    \\\"autoload\\\": {\\n        \\\"psr-4\\\": {\\n            \\\"Webmis\\\\\\\\\\\": \\\"src/\\\"\\n        }\\n    }\\n}\\n```\\n### 安装项目\\n``` bash\\ncomposer install\\n```\\n### 排除内容（.gitignore）\\n``` bash\\n/vendor\\ncomposer.lock\\n```\\n\\n## 三、Packagist\\n- 首先要在Packagist上注册账号并登录\\n- 点击顶部导航条中的Summit按钮\\n- 在输入框中输入github上的仓库地址，如：https://github.com/webmiss/framework\\n- 然后点击Check按钮\\n- 检测正常的话，会出现Submit按钮，再点击一下Submit按钮，我们的包就提交到Packagist上了\\n- 以后更新代码可以先从Packagist获取token然后去github 配置下对应的GitHub Service Hook实现代码提交后Packagist自动拉取更新\\n\\n## 四、使用\\n``` bash\\ncomposer require webmiss/framework\\n```\\n或者（composer.json）\\n``` bash\\n{\\n    \\\"require\\\": {\\n        \\\"webmiss/framework\\\":\\\"dev-master\\\" //这里的版本根据实际需要修改\\n    }\\n}\\n```\\n### 优化自动加载\\n``` bash\\ncomposer dump-autoload --optimize\\n```\"","module.exports = \"## 代码提示( c_cpp_properties.json )\\n```json\\n{\\n    \\\"configurations\\\": [\\n        {\\n            \\\"name\\\": \\\"Linux\\\",\\n            \\\"includePath\\\": [\\n                \\\"${workspaceFolder}/**\\\",\\n                \\\"/usr/include/linux\\\",\\n                \\\"/usr/include/c++/8.1.1/tr1\\\"\\n            ],\\n            \\\"defines\\\": [],\\n            \\\"compilerPath\\\": \\\"/usr/bin/gcc\\\",\\n            \\\"cStandard\\\": \\\"c11\\\",\\n            \\\"cppStandard\\\": \\\"c++17\\\",\\n            \\\"intelliSenseMode\\\": \\\"clang-x64\\\"\\n        }\\n    ],\\n    \\\"version\\\": 4\\n}\\n```\\n\\n## 启动任务( launch.json )\\n```json\\n{\\n    \\\"version\\\": \\\"0.2.0\\\",\\n    \\\"configurations\\\": [\\n        {\\n            \\\"name\\\": \\\"(gdb) Launch\\\",\\n            \\\"type\\\": \\\"cppdbg\\\",\\n            \\\"request\\\": \\\"launch\\\",\\n            \\\"program\\\": \\\"${workspaceRoot}/${fileBasenameNoExtension}.o\\\",\\n            \\\"preLaunchTask\\\": \\\"build\\\",\\n            \\\"args\\\": [],\\n            \\\"stopAtEntry\\\": false,\\n            \\\"cwd\\\": \\\"${workspaceFolder}\\\",\\n            \\\"environment\\\": [],\\n            \\\"externalConsole\\\": true,\\n            \\\"MIMode\\\": \\\"gdb\\\",\\n            \\\"setupCommands\\\": [\\n                {\\n                    \\\"description\\\": \\\"Enable pretty-printing for gdb\\\",\\n                    \\\"text\\\": \\\"-enable-pretty-printing\\\",\\n                    \\\"ignoreFailures\\\": true\\n                }\\n            ]\\n        }\\n    ]\\n}\\n```\\n\\n## 执行命令( tasks.json )\\n```json\\n{\\n    \\\"version\\\": \\\"2.0.0\\\",\\n    \\\"tasks\\\": [\\n        {\\n            \\\"label\\\": \\\"build\\\",\\n            \\\"type\\\": \\\"shell\\\",\\n            \\\"command\\\": \\\"g++ ${file} -o ${fileBasenameNoExtension}.o && ./${fileBasenameNoExtension}.o\\\",\\n            \\\"problemMatcher\\\": [\\n                \\\"$gcc\\\"\\n            ]\\n        }\\n    ]\\n}\\n```\\n\"","module.exports = \"## 1) Firewalld\\n``` bash\\n# 开机启动\\nsystemctl enable firewalld\\n# 启动\\nsystemctl start firewalld\\n# 状态\\nsystemctl status firewalld\\n```\\n\\n### 重启防火墙\\n``` bash\\nfirewall-cmd --reload\\n\\n# 查看所以规则\\nfirewall-cmd --zone=public --list-all\\n# 查看永久选项所支持的服务\\nfirewall-cmd --permanent --get-services\\n# 查看支持的永久区域\\nfirewall-cmd --permanent --get-zones\\n# 查看默认区域\\nfirewall-cmd --get-default-zone\\n# 查看服务状态\\nfirewall-cmd --query-service=http\\n```\\n\\n### 启用区域中的服务\\n``` bash\\n# Http/MySQL\\nfirewall-cmd --permanent --zone=public --add-service=http\\nfirewall-cmd --permanent --zone=public --add-service=mysql\\n```\\n\\n### 启用区域中的端口\\n``` bash\\nfirewall-cmd --permanent --zone=public --add-port=443/tcp\\n```\\n\\n### 查询区域中的服务是否启用\\n``` bash\\nfirewall-cmd --permanent --zone=public --query-service=mysql\\n```\\n\\n### 禁用区域中的服务\\n``` bash\\nfirewall-cmd --permanent --zone=public --remove-service=http\\n```\\n\\n## 2) Iptables\\n``` bash\\n# CentOS 7\\nsystemctl enable iptables\\nsystemctl start iptables\\nsystemctl status iptables\\n# CentOS 6\\nsystem-config-firewall-tui\\n```\\n\\n### 重启防火墙\\n``` bash\\n/etc/init.d/iptables restart\\n```\\n\\n### 配置文件\\n``` bash\\nvi /etc/sysconfig/iptables\\n```\\n\\n### 文件内容\\n``` bash\\n# 规则\\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\\n-A INPUT -p icmp -j ACCEPT\\n-A INPUT -i lo -j ACCEPT\\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\\nCOMMIT\\n```\\n\\n### 端口映射\\n``` bash\\n*nat\\n[...]\\n-A PREROUTING -d 222.56.xxx.xxx -p tcp --dport 8081 -j DNAT --to 192.168.1.3:80<br/>\\n-A POSTROUTING -d 192.168.1.3 -p tcp --dport 80 -j SNAT --to 192.168.1.2<br/>\\n[...]\\nCOMMIT\\n```\\n\"","module.exports = \"# WebMIS\\n基于Phalcon全套前端分离开发方案，包括MVC框架、后台管理、Web、WebAPP、Flutter、微信小程序、API接口工具等，整套框架只封装基础功能，对于使用者还需具备扎实的计算机编程基础和设计模式。\\n```bash\\ngit clone https://github.com/webmiss/base\\n```\\n\\n## 一、Phalcon后台框架\\n主要为每个客户端提供接口验证和数据，需要安装扩展如下：\\n- PHP-FPM PHP环境\\n- Phalcon C扩展编写的PHP框架\\n- Swoole 消息推送\\n- Redis 缓存数据库\\n- MariaDB 主数据库\\n\\n可以参考： Linux文档 > CentOS > Nginx+PHP+Mariadb\\n\\n### 1) 创建用户、导入数据库\\n数据库文件: phalcon/mvc_vue.sql\\n\\n### 2) Nginx配置\\n配置参考文件: phalcon/nginx.conf\\n\\n### 3) Socket消息推送\\nhttps://api.webmis.vip/api/index/socket\\n\\n\\n## 二、Admin后台管理\\n多用户、多权限、多角色管理，必要时可打包成APP自动更新\\n```bash\\n# 进入目录\\ncd admin\\n# 安装依赖\\nyarn install\\n# 运行\\nyarn serve\\n```\\n### 在线体验( https://admin.webmis.vip 帐号: admin 密码: 123456 )\\n\\n## 三、Web前端\\n多年开发总结的技术文档，包括工具安装、Linux服务器配置等\\n```bash\\n# 进入目录\\ncd web\\n# 安装依赖\\nyarn install\\n# 运行\\nyarn serve\\n```\\n### 在线体验( https://webmis.vip )\\n\\n## 四、WebAPP混合型\\n使用Vue路由模拟手机页面切换效果，HBuilder打包和访问原生功能\\n```bash\\n# 进入目录\\ncd webapp\\n# 安装依赖\\nyarn install\\n# 运行\\nyarn serve\\n```\\n### 在线体验( https://webapp.webmis.vip/ )\\n\\n## 五、Wechat微信小程序\\n图片压缩、高德地图、定位、socket消息推送、客服消息、支付、本地硬盘等\\n```bash\\n# 进入目录\\ncd wechat\\n```\\n\\n## 六、Flutter原生APP\\n图片裁切、图片压缩、请求相应、高德地图、本地硬盘等\\n```bash\\n# 进入目录\\ncd app\\n# 安装依赖\\nflutter pub get\\n# 运行\\nflutter run\\n```\\n\\n## 七、API接口请求工具\\ndocs > src > config.js 添加接口\\n```bash\\n# 进入目录\\ncd docs\\n# 安装依赖\\nyarn install\\n# 运行\\nyarn serve\\n```\\n\\n## 八、Project项目资料\\nAPP设计标准和开发文档\\n```bash\\n# 进入目录\\ncd project\\n```\"","module.exports = \"## 一、Docker容器\\n是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的`Linux`机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\\n### 1.1 安装\\n```bash\\n# CentOS\\nyum install docker\\n# 开机启动\\nsystemctl enable docker\\n# 启动\\nsystemctl start docker\\n```\\n\\n### 1.2 镜像管理\\n```bash\\n# 搜索\\ndocker search centos\\n# 下载\\ndocker pull centos\\n# 查看\\ndocker images\\n# 删除\\ndocker rmi centos\\n```\\n\\n### 1.3 运行镜像\\n```bash\\n# 运行\\ndocker run -it centos\\n\\n# 运行一个新容器，同时为它命名、端口映射、文件夹映射\\ndocker run --name redmine -p 9003:80 -p 9023:22 -d -v /var/redmine/files:/redmine/files -v /var/redmine/mysql:/var/lib/mysql centos\\n\\n# 退出并停止\\nexit\\n\\n# 如何退出容器而不停止容器？\\nCtrl+P+Q\\n```\\n\\n### 1.4 容器管理\\n```bash\\n# 查看/停止/启动/杀死/移除\\ndocker ps -a\\ndocker stop 容器ID\\ndocker start 容器ID\\ndocker kill 容器ID\\ndocker rm 容器ID\\n\\n# 查看容器信息\\ndocker inspect 容器ID\\n\\n# 进入正在运行的容器\\ndocker attach 容器ID\\n\\n# 将容器储存为镜像\\ndocker commit 容器ID 名称\\n```\\n\\n### 1.5 镜像迁移\\n```bash\\n# 保存\\ndocker save 镜像名称 > /home/save.tar\\n# 复制的服务器\\nscp /home/save.tar root@IP:/home/\\n# 导入到镜像\\ndocker load < /home/save.tar\\n```\\n\\n### 1.6 容器-导出/导入\\n```bash\\ndocker export 容器ID > /home/export.tar\\ndocker import export.tar\\n```\\n\\n### 1.7 容器内部文件-拷贝/删除\\n```bash\\ndocker cp 容器ID:路径 ./\\ndocker rm 容器ID:路径 ./\\n```\\n\\n## 二、案例：Ubuntu+Nginx服务器\\n### 2.1 下载并运行\\n```bash\\n# 下载Ubuntu镜像\\ndocker pull ubuntu\\n\\n# 运行容器\\ndocker run --privileged=true -it --name nginx-ubuntu -v /home/www:/home/www ubuntu /bin/bash\\n```\\n### 2.2 安装Nginx\\n```bash\\n# 更新\\napt update\\n# 安装\\napt install nginx\\n# 启动\\nservice nginx start\\n```\\n### 2.3 配置文件\\n```bash\\n# 安装vim\\napt install vim\\n# 修改虚拟主机存放位置\\nvi /etc/nginx/nginx.conf\\n\\t# include /etc/nginx/conf.d/*.conf;\\n\\t# include /etc/nginx/sites-enabled/*;\\n\\tinclude /home/www/nginx-s1/*.conf;\\n# 虚拟主机目录\\nmkdir /home/www/nginx-s1/\\n# 拷贝默认配置文件\\ncp /etc/nginx/sites-enabled/default /home/www/nginx-s1/default.conf\\n```\\n### 2.4 配置虚拟主机\\n```bash\\nvi /home/www/nginx-s1/default.conf\\n```\\n**内容如下：**\\n```nginx\\nserver {\\n        listen 80 default_server;\\n        listen [::]:80 default_server;\\n\\n        server_name localhost;\\n        root /home/www/s1/;\\n        index index.html;\\n\\n        location / {\\n                try_files $uri $uri/ =404;\\n        }\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #       include snippets/fastcgi-php.conf;\\n        #\\n        #       # With php7.0-cgi alone:\\n        #       fastcgi_pass 127.0.0.1:9000;\\n        #       # With php7.0-fpm:\\n        #       fastcgi_pass unix:/run/php/php7.0-fpm.sock;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache's document root\\n        # concurs with nginx's one\\n        #\\n        location ~ /\\\\.ht {\\n                deny all;\\n        }\\n}\\n```\\n**创建网站目录**\\n```bash\\n# 网站目录\\nmkdir /home/www/s1\\n# 测试文件\\necho '<h1>Server1</h1>' > /home/www/s1/index.html\\n# 重启服务\\nservice nginx restart\\n```\\n### 2.5 安装SSH\\n```bash\\n# 安装\\napt install openssh-server\\n# 启动\\nservice ssh start\\n\\n# 无法链接\\nvi /etc/ssh/sshd_config\\n\\tPermitRootLogin yes\\n\\tUsePAM no\\n```\\n\\n### 2.6 如何退出容器而不停止容器？\\n```bash\\nCtrl+P+Q\\n```\\n\\n### 2.7 将容器储存为镜像\\n```bash\\ndocker commit 容器ID ubuntu-server\\n```\\n\\n### 2.8 运行容器\\n```bash\\ndocker run --privileged=true -it --name ubuntu-s1 -v /home/www:/home/www  -p 8081:80 ubuntu-server /bin/bash\\n\\n# 启动Nginx\\nservice nginx start\\n\\n# 退出容器命令行\\nCtrl+P+Q\\n```\\n\\n### 2.9 测试容器\\n```bash\\n# 查看容器ID\\ndocker ps -a\\n# 查看容器IP地址\\nip address\\n# 测试网站服务器\\ncurl http://172.17.0.1:8081\\n```\\n\\n## 三、服务器集群\\n**制作三台服务器**\\n- 1.进入nginx-ubuntu\\n- 2.修改Nginx\\n- 3.将容器储存为镜像\\n- 4.运行容器\\n- 5.测试结果\"","module.exports = \"## 关闭SELinux\\n``` bash\\nvi /etc/selinux/config\\n```\\nSELINUX=disabled\\n\\n### 开启防火墙\\n``` bash\\n# CentOS 6\\nsystem-config-firewall-tui\\n# CentOS 7\\nsystemctl start firewalld\\n```\\n\\n## 软件源\\n### 添加Epel源\\n``` bash\\n# CentOS 6\\nrpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\\n# CentOS 7\\nyum install epel-release\\n```\\n\\n## 更新服务器时间\\n``` bash\\n# 查看时间\\ndate\\n# 在线更新时间\\nntpdate time.daruizi.com\\n# 将时间同步到BIOS\\nhwclock -w\\n```\\n\\n## Yum软件管理\\n``` bash\\n# 安装记录\\ncat /var/log/yum.log\\n\\n# 查看事务\\nyum history list\\nyum history info N\\n\\n# 重做\\nyum history redo N\\n\\n# 回滚\\nyum history undo N\\n```\\n\\n## 双网卡配置\\n### 外网配置\\n``` bash\\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\\n```\\nONBOOT=yes<br>\\nBOOTPROTO=none # dhcp自动获取<br>\\nIPADDR=222.56.42.154<br>\\nNETMASK=255.255.255.192<br>\\nGATEWAY=222.56.42.129<br>\\nDNS1=211.98.72.7<br>\\nDNS2=211.98.72.8<br>\\n\\n### 内网配置\\n``` bash\\nvi /etc/sysconfig/network-scripts/ifcfg-eth2\\n```\\nONBOOT=yes<br>\\nBOOTPROTO=none # dhcp自动获取<br>\\nIPADDR=192.168.1.248<br>\\nNETMASK=255.255.255.0<br>\\n\\n## 常用网络命令\\n``` bash\\n# 安装网络工具包\\nyum install net-tools -y\\n# 查看网络\\nifconfig\\n# 加载网卡eth0\\nifconfig eth0 up\\n```\\n\\n### 重启网络\\n``` bash\\n# CentOS 6\\nservice network restart\\n# CnetOS 7\\nsystemctl restart network\\n```\\n\"","module.exports = \"## 实现聊天室\\n### Html\\n``` html\\n<div id=\\\"wrapper\\\">\\n\\t<div id=\\\"message\\\"></div>\\n\\t<div id=\\\"action\\\">\\n\\t\\t<textarea id=\\\"data\\\" style=\\\"width: calc(100% - 12px);\\\" rows=\\\"3\\\" placeholder=\\\"请输入聊天内容！\\\"></textarea>\\n\\t\\t<div class=\\\"tcenter\\\" style=\\\"padding: 10px 0;\\\">\\n\\t\\t\\t<label>发送<button id=\\\"send\\\" class=\\\"noDisplay\\\"></button></label>\\n\\t\\t</div>\\n\\t</div>\\n</div>\\n```\\n\\n### CSS\\n``` css\\n#message{max-height: 200px; overflow-y: auto; background-color: #F2F4F6; padding: 10px;}\\n#message dl{overflow: hidden; padding: 5px;}\\n#message dl dt{\\n\\tfloat: left;\\n\\twidth: 36px;\\n\\theight: 36px;\\n\\tbackground-color: #FFF;\\n\\tborder-radius: 18px;\\n\\tbackground-repeat: no-repeat;\\n\\tbackground-size: 80%;\\n\\tbackground-position: center center;\\n}\\n#message dl dd{margin-left: 40px;}\\n#message dl dd span{\\n\\toverflow: hidden;\\n\\tdisplay: inline-block;\\n\\tbackground-color: #FFF;\\n\\tborder-radius: 3px;\\n\\tbox-shadow: 0 0 1px rgba(0,0,0,0.3);\\n\\tpadding: 10px;\\n}\\n#action label{\\n\\tpadding: 8px 30px;\\n\\tbackground-color: #6FB737;\\n\\tcolor: #FFF;\\n\\tborder-radius: 3px;\\n\\tbox-shadow: 1px 1px 3px rgba(0,0,0,0.5);\\n}\\n```\\n\\n### JavaSrcipt\\n``` javascript\\n(function() {\\n\\n\\tvar socket = new WebSocket('wss://webmis.vip/wss/');\\n\\tvar send = document.getElementById('send');\\n\\tvar data = document.getElementById('data');\\n\\tvar message = document.getElementById('message');\\n\\tvar wrapper = document.getElementById('wrapper');\\n\\tvar height = (wrapper.offsetHeight) -270;\\n\\n\\tmessage.style.height = height+'px';\\n\\tsocket.onopen = function(event) {\\n\\t\\tmessage.innerHTML = '<p><span>欢迎 <b>XXX</b></span></p>';\\n\\t}\\n\\n\\tsocket.onmessage = function(event) {\\n\\t\\tvar dl = document.createElement('dl');\\n\\t\\tvar jsonData = JSON.parse(event.data);\\n\\t\\tdl.innerHTML =  '<dt style=\\\"background-image: url('+jsonData.avatar+');\\\"></dt><dd><span>'+jsonData.content+'</span></dd>';\\n\\t\\tmessage.appendChild(dl);\\n\\t\\tmessage.scrollTop = message.scrollHeight;\\n\\t}\\n\\n\\tsocket.onerror = function() {\\n\\t\\tmessage.innerHTML = '<p><span>连接失败！</span></p>';\\n\\t}\\n\\n\\tsend.addEventListener('click', function() {\\n\\n\\t\\tvar content = data.value;\\n\\t\\tif(content.length <= 0) {\\n\\t\\t\\talert('消息不能为空！');\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tvar avatar = Math.random();\\n\\t\\tvar message = {\\n\\t\\t\\t\\\"avatar\\\" : '/favicon.png',\\n\\t\\t\\t\\\"nickname\\\" : '测试',\\n\\t\\t\\t\\\"content\\\" : content\\n\\t\\t}\\n\\n\\t\\tvar json = JSON.stringify(message);\\n\\t\\tsocket.send(json);\\n\\n\\t\\tdata.value = ''; data.focus();\\n\\n\\t});\\n})();\\n```\\n\\n### PHP\\n``` php\\n<?php\\nextension_loaded('sockets') or die('请加载Sockets扩展');\\n/*\\n* WebSocket类\\n*/\\nclass WebSocket{\\n\\tprivate $socket;\\n\\tprivate $accept;\\n\\tprivate $isHand = [];\\n\\n\\t/* 构造函数 */\\n\\tfunction __construct($host, $port, $max){\\n\\t\\t// 创建Socket\\n\\t\\t$this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\\n\\t\\t// 设置\\n\\t\\tsocket_set_option($this->socket, SOL_SOCKET, SO_REUSEADDR, TRUE);\\n\\t\\t// 绑定地址和端口\\n\\t\\tsocket_bind($this->socket, $host, $port);\\n\\t\\t// 开始监听连接\\n\\t\\tsocket_listen($this->socket, $max);\\n\\t}\\n\\n\\t/* 启动 */\\n\\tfunction start(){\\n\\t\\twhile(true) {\\n\\t\\t\\t$cycle = $this->accept;\\n\\t\\t\\t$cycle[] = $this->socket;\\n\\t\\t\\tsocket_select($cycle, $write, $except, null);\\n\\t\\t\\t// 全部Socket\\n\\t\\t\\tforeach($cycle as $sock) {\\n\\t\\t\\t\\t// 首次握手\\n\\t\\t\\t\\tif($sock === $this->socket) {\\n\\t\\t\\t\\t\\t// 另一个Socket通信\\n\\t\\t\\t\\t\\t$client = socket_accept($this->socket);\\n\\t\\t\\t\\t\\t$this->accept[] = $client;\\n\\t\\t\\t\\t\\t// 最后通信名\\n\\t\\t\\t\\t\\t$key = array_keys($this->accept);\\n\\t\\t\\t\\t\\t$key = end($key);\\n\\t\\t\\t\\t\\t// 是否新通信\\n\\t\\t\\t\\t\\t$this->isHand[$key] = false;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t// Socket接受长度\\n\\t\\t\\t\\t\\t$length = socket_recv($sock, $buffer, 204800, 0);\\n\\t\\t\\t\\t\\t$key = array_search($sock, $this->accept);\\n\\t\\t\\t\\t\\t// 客户端中断\\n\\t\\t\\t\\t\\tif($length < 7) {\\n\\t\\t\\t\\t\\t\\t$this->close($sock);\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// 是否首次握手\\n\\t\\t\\t\\t\\tif(!$this->isHand[$key]) {\\n\\t\\t\\t\\t\\t\\t$this->dohandshake($sock, $buffer, $key);\\n\\t\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t\\t// 先解码，再编码\\n\\t\\t\\t\\t\\t\\t$data = $this->decode($buffer);\\n\\t\\t\\t\\t\\t\\t$data = $this->encode($data);\\n\\t\\t\\t\\t\\t\\t// 判断断开连接\\n\\t\\t\\t\\t\\t\\tif(strlen($data) > 10) {\\n\\t\\t\\t\\t\\t\\t\\tforeach($this->accept as $client) {\\n\\t\\t\\t\\t\\t\\t\\t\\tsocket_write($client, $data, strlen($data));\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/* 首次与客户端握手 */\\n\\tprivate function dohandshake($sock, $data, $key) {\\n\\t\\tif (preg_match(\\\"/Sec-WebSocket-Key: (.*)\\\\r\\\\n/\\\", $data, $match)) {\\n\\t\\t\\t$response = base64_encode(sha1($match[1] . '258EAFA5-E914-47DA-95CA-C5AB0DC85B11', true));\\n\\t\\t\\t$upgrade  = \\\"HTTP/1.1 101 Switching Protocol\\\\r\\\\n\\\" .\\n\\t\\t\\t\\\"Upgrade: websocket\\\\r\\\\n\\\" .\\n\\t\\t\\t\\\"Connection: Upgrade\\\\r\\\\n\\\" .\\n\\t\\t\\t\\\"Sec-WebSocket-Accept: \\\" . $response . \\\"\\\\r\\\\n\\\\r\\\\n\\\";\\n\\t\\t\\tsocket_write($sock, $upgrade, strlen($upgrade));\\n\\t\\t\\t$this->isHand[$key] = true;\\n\\t\\t}\\n\\t}\\n\\n\\t/* 关闭一个客户端连接 */\\n\\tprivate function close($sock) {\\n\\t\\t$key = array_search($sock, $this->accept);\\n\\t\\tsocket_close($sock);\\n\\t\\tunset($this->accept[$key]);\\n\\t\\tunset($this->handshake[$key]);\\n\\t}\\n\\n\\t/* 编码 */\\n\\tpublic function encode($buffer) {\\n\\t\\t$length = strlen($buffer);\\n\\t\\tif($length <= 125) {\\n\\t\\t\\treturn \\\"\\\\x81\\\".chr($length).$buffer;\\n\\t\\t} else if($length <= 65535) {\\n\\t\\t\\treturn \\\"\\\\x81\\\".chr(126).pack(\\\"n\\\", $length).$buffer;\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"\\\\x81\\\".char(127).pack(\\\"xxxxN\\\", $length).$buffer;\\n\\t\\t}\\n\\t}\\n\\n\\t/* 解码 */\\n\\tprivate function decode($buffer) {\\n\\t\\t$len = $masks = $data = $decoded = null;\\n\\t\\t$len = ord($buffer[1]) & 127;\\n\\t\\tif ($len === 126) {\\n\\t\\t\\t$masks = substr($buffer, 4, 4);\\n\\t\\t\\t$data = substr($buffer, 8);\\n\\t\\t} \\n\\t\\telse if ($len === 127) {\\n\\t\\t\\t$masks = substr($buffer, 10, 4);\\n\\t\\t\\t$data = substr($buffer, 14);\\n\\t\\t} \\n\\t\\telse {\\n\\t\\t\\t$masks = substr($buffer, 2, 4);\\n\\t\\t\\t$data = substr($buffer, 6);\\n\\t\\t}\\n\\t\\tfor ($index = 0; $index < strlen($data); $index++) {\\n\\t\\t\\t$decoded .= $data[$index] ^ $masks[$index % 4];\\n\\t\\t}\\n\\t\\treturn $decoded;\\n\\t}\\n\\n}\\n\\n// 调用\\n$webSocket = new WebSocket('127.0.0.1', 8080, 100);\\n$webSocket->start();\\n```\\n\\n### Nginx\\n``` nginx\\n# WebSocket\\nlocation /wss/ {\\n\\tproxy_pass http://127.0.0.1:8080;\\n\\tproxy_http_version 1.1;\\n\\tproxy_set_header   Upgrade $http_upgrade;\\n\\tproxy_set_header   Connection \\\"upgrade\\\";\\n\\tproxy_set_header   Host $http_host;\\n}\\n```\"","module.exports = \"## 一、安装\\n``` bash\\nyum install git -y\\n```\\n### 创建用户组\\n``` bash\\ngroupadd gitgroup\\n```\\n### 创建用户\\n``` bash\\nuseradd -G gitgroup -M gituser\\n```\\n### 修改密码\\n``` bash\\npasswd gituser\\n```\\n\\n## 二、仓库\\n``` bash\\n# 目录\\nmkdir /home/git && cd /home/git\\n\\n# 初始化仓库\\ngit init --bare webmis.git\\n\\n# 修改所属\\nchown -R gituser:gitgroup webmis.git\\n\\n# 检出\\ngit clone gituser@IP:/home/git/webmis.git\\n```\\n\\n\"","module.exports = \"## 常用命令\\n### 设置root账户\\n``` bash\\n# 新密码\\nmysql_secure_installation\\n\\n# 登陆\\nmysql -uroot -p\\n\\n# 设置新密码\\nmysqladmin -u root -password <新密码>\\n\\n# 修改密码\\nmysqladmin -u root -p <旧密码> password <新密码>\\n\\n# 重启MariaDB\\nsystemctl restart mariadb\\n```\\n### 创建用户\\n``` bash\\n# 创建新用户\\n'<用户名>'@'<localhost>' IDENTIFIED BY '<密码>';\\n\\n# 添加权限\\ngrant SELECT,INSERT,UPDATE,DELETE on '<指定数据库>' to '<用户名>'@'localhost';\\n\\n# 显示所有用户\\nselect host,user from mysql.user;\\n\\n# 删除用户\\ndrop user '<用户名>'@'localhost';\\n```\\n\\n### 数据库\\n``` bash\\n# 查看\\nshow databases;\\n\\n# 使用\\nuse `<数据库名>`;\\n\\n# 查看数据库编码\\nshow variables like 'character_set_database';\\n\\n# 新建数据库\\ncreate database `<数据库名>`;\\n# 新建数据库并设置编码\\ncreate database `<数据库名>` default character set <utf8> collate <utf8_general_ci>;\\n# 更改数据库编码\\nalter database `<数据库名>` default character set <utf8> collate <utf8_general_ci>;\\n\\n# 删除\\ndrop database `<数据库名>`;\\n```\\n\\n### 数据表\\n``` bash\\n# 查看\\nshow tables;\\n\\n# 创建数据表\\ncreate table `<数据库名>`.`<表名>`;\\n\\n# 查看编码\\nshow create table `<表名>`;\\n# 修改编码格式\\nalter table `<表名>` character set <utf8>;\\n\\n# 删除\\ndrop table `<表名>`;\\n```\\n\\n### 字段\\n``` bash\\n# 查看\\nshow create table `<表名>`;\\n# 字段列信息\\nshow columns from `<表名>`\\n\\n# 添加\\nalter table `<表名>` add `<字段名>` varchar(6) not null COMMENT '<备注>' AFTER `<字段后>`;\\n\\n# 修改\\nalter table `<表名>` change `<字段名>` `<字段名>` varchar(12) character set utf8 COLLATE utf8_general_ci NOT NULL COMMENT '<备注>';\\n\\n# 删除\\nalter table `<表名>` drop `<字段名>`;\\n```\\n\\n### 索引\\n``` bash\\n# 索引信息\\nshow index from `<表名>`\\n\\n# 添加索引\\nalter table `<数据库名>`.`<表名>` ADD PRIMARY KEY (`<字段1>`(长度), `<字段2>`(长度));\\n# - PRIMARY 主键，唯一不能为空。\\n# - INDEX 索引，普通的。\\n# - UNIQUE 唯一索引，不允许有重复可以为空。\\n# - FULLTEXT 是全文索引，用于在一篇文章中，检索文本信息的。\\n\\n# 删除索引\\nalter table `<表名>` DROP INDEX `<字段>`;\\n```\\n\\n### 分区\\n``` bash\\n# 用户表\\nCREATE TABLE `test`.`user` (\\n    `id` INT (10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',\\n    `username` VARCHAR (32) NOT NULL COMMENT '用户名',\\n    `password` VARCHAR (32) NOT NULL COMMENT '密码',\\n    `state` ENUM ('0', '1') NOT NULL DEFAULT '1' COMMENT '状态(0禁用,1正常)',\\n    PRIMARY KEY (`id`)\\n) ENGINE = InnoDB;\\n\\n# 添加数据\\nINSERT INTO\\n    `user` (`id`, `username`, `password`, `state`)\\nVALUES\\n    (NULL, 'user1', '123456', '1'),\\n    (NULL, 'user2', '123456', '1'),\\n    (NULL, 'user3', '123456', '1');\\n\\n# 分区（RANGE）\\nALTER TABLE `user` partition BY RANGE(id)(\\n    partition p0 VALUES LESS THAN (3),\\n    partition p1 VALUES LESS THAN (6),\\n    partition p2 VALUES LESS THAN (9)\\n);\\n\\n# 查看\\nEXPLAIN PARTITIONS SELECT * FROM `user`;\\n\\n# 添加（RANGE）\\nALTER TABLE `user` ADD partition(\\n    partition p3 VALUES LESS THAN maxvalue\\n);\\n\\n# 拆分\\nALTER TABLE `user` REORGANIZE partition p3 into(\\n    partition p3 VALUES LESS THAN (12),\\n    partition p4 VALUES LESS THAN maxvalue\\n);\\n\\n# 合并\\nALTER TABLE `user` REORGANIZE partition p3,p4 into(\\n    partition p3 VALUES LESS THAN maxvalue\\n);\\n\\n# 删除（包括数据）\\nALTER TABLE `user` DROP partition p0;\\n# 删除（恢复非分区状态）\\nALTER TABLE `user` REMOVE partitioning;\\n\\n```\\n\\n### 外键\\n``` bash\\n# 创建数据库\\ncreate database `test` default character set utf8 collate utf8_general_ci;\\n\\n# 用户基础表\\nCREATE TABLE `test`.`user` (\\n\\t`id` SMALLINT(6) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID' ,\\n\\t`name` VARCHAR(12) NOT NULL COMMENT '姓名' ,\\n\\t`sex` ENUM('男','女') NOT NULL DEFAULT '男' COMMENT '性别' ,\\n\\t`age` TINYINT(3) NOT NULL DEFAULT 20 COMMENT '年龄' ,\\n\\tPRIMARY KEY (`id`)\\n) ENGINE = InnoDB;\\n\\n# 用户信息表\\nCREATE TABLE `test`.`user_info` (\\n\\t`id` SMALLINT(6) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID' ,\\n\\t`uid` SMALLINT(6) UNSIGNED NOT NULL COMMENT 'UID' ,\\n\\t`content` TEXT NOT NULL DEFAULT '' COMMENT '内容' ,\\n\\tPRIMARY KEY (`id`),\\n) ENGINE = InnoDB;\\n\\n# 添加索引\\nalter table `test`.`user_info` ADD PRIMARY KEY (`uid`);\\n\\n# 添加外键\\nALTER TABLE `user` ADD CONSTRAINT `<外键名称>` FOREIGN KEY (`id`) REFERENCES `user_info`(`uid`) ON DELETE RESTRICT ON UPDATE RESTRICT;\\n# - CASCADE 在父表上update/delete记录时，同步update/delete掉子表的匹配记录 \\n# - SET NULL 在父表上update/delete记录时，将子表上匹配记录的列设为null (要注意子表的外键列不能为not null)  \\n# - NO ACTION 如果子表中有匹配的记录,则不允许对父表对应候选键进行update/delete操作  \\n# - RESTRICT 同no action, 都是立即检查外键约束\\n\\n# 删除外键\\nalter table test.user DROP FOREIGN KEY `<外键名称>`;\\n```\\n\\n### 数据\\n``` bash\\n# 查询\\nSELECT * FROM `user` WHERE id=1;\\n\\n# 添加\\nINSERT INTO `user`( `name`, `sex`, `age`) VALUES ('张三','1',25);\\n\\n# 更新\\nUPDATE `user` SET `name`='李四',`sex`='2',`age`=20 WHERE id=1;\\n\\n# 删除\\nDELETE FROM `user` WHERE id=1;\\n```\\n\\n## 备份和恢复\\n``` bash\\nvi /home/mysql.sh\\n```\\n### 1) MySQL备份\\n``` bash\\n#!/bin/bash\\nuname=root\\npasswd=***\\ndbname=***\\npath=***_`date '+%Y-%m-%d'`.sql\\nmysqldump -u$uname -p$passwd --databases $dbname --lock-all-tables --flush-logs > $path\\n```\\n### 2) MySQL恢复\\n``` bash\\n#!/bin/bash\\nmysql -u$uname -p$passwd $dbname < $path\\n```\\n\\n### 3) 定时执行(每天23:30执行备份)\\n``` bash\\n# 添加定时\\ncrontab -e\\n# 内容\\n30 23 * * * sh /home/mysql.sh\\n```\\n\\n### 4) 备份差异到本地目录\\n``` bash\\nrsync -rvu --delete root@IP:/home/test/ /home/test\\n```\\n\\n### 5) 数据恢复\\n``` bash\\nmysql -u 用户名 -p密码 数据库名 < 备份的数据库.sql\\n```\\n\\n## SSH免密码登录\\n### 方法一：\\n``` bash\\n# 生成公钥\\nssh-keygen -t rsa\\n# 将公钥放到服务器上\\nscp ~/.ssh/id_rsa.pub root@IP:~/.ssh/authorized_keys\\n```\\n### 方法二：\\n``` bash\\npacman -S sshpass\\nsshpass -p '你的密码' ssh root@IP\\n```\"","module.exports = \"## 一、安装Cordova\\n``` bash\\n# 安装 NodeJS\\npacman -S npm\\n# 安装 Cordova\\nnpm install -g cordova\\n```\\n### 创建测试项目\\n``` bash\\n# 新建项目\\ncordova create MyApp\\n\\n# 创建平台\\ncd MyApp\\ncordova platform add browser\\n\\n# 运行项目\\ncordova run browser\\n```\\n\\n## 二、Android开发环境\\n### 安装JDK\\n``` bash\\npacman -S jdk8-openjdk\\n```\\n\\n### 安装SDK( http://www.androiddevtools.cn/ )\\n``` bash\\n vim /etc/profile\\n```\\nexport ANDROID_HOME=/home/android-sdk-linux<br>\\nexport PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH<br>\\n``` bash\\n # 配置生效\\nsource /etc/profile\\n# 更新代理配置\\nandroid\\n```\\nAndroid SDK Manager > Tools > Options\\n``` bash\\nHTTP Proxy Server : mirrors.neusoft.edu.cn\\nHTTP Proxy Port : 80\\nv Force https://... sources to be fetched using http://...\\n# 更新完成后，安装以下包 Android SDK Tools\\nAndroid SDK Platform-tools\\nAndroid SDK Build-tools\\nIntel x86 Atom_64 System Image\\nIntel x86 Atom System Image\\nAndroid Support Repository\\n```\\n### 模拟器\\n``` bash\\nandroid avd\\n\\n# 文件下载失败\\ncd $HOME/.gradle/wrapper/dists/gradle-2.14.1-all/4cj8p00t3e5ni9e8iofg8ghvk7\\naxel http://services.gradle.org/distributions/gradle-2.14.1-all.zip\\n```\\n\\n## 三、创建Android平台\\n``` bash\\ncordova platform add android\\ncordova run android\\n```\\n\\n## 四、打包发布\\n``` bash\\n# 生成签名文件\\nkeytool -genkey -v -keystore android.keystore -alias android.keystore -keyalg RSA -validity 20000\\n\\n# 签名包\\njarsigner -verbose -keystore android.keystore -signedjar ./android-release.apk ./android-debug.apk android\\n\\n# 打包并签名\\ncordova build android --release -- --keystore=\\\"android.keystore\\\" --storePassword=PSSWD --alias=android\\n\\n# Cordova 配置文件\\nvim build.json\\n\\t{\\n\\t\\t\\\"android\\\": {\\n\\t\\t\\t\\\"release\\\": {\\n\\t\\t\\t\\t\\\"keystore\\\": \\\"key/android.keystore\\\",\\n\\t\\t\\t\\t\\\"alias\\\": \\\"android\\\",\\n\\t\\t\\t\\t\\\"storePassword\\\": \\\"PSSWD\\\",\\n\\t\\t\\t\\t\\\"password\\\": \\\"PSSWD\\\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n# 打包并签名\\ncordova build android --release\\n```\\n\"","module.exports = \"## 一、安装GNOME3桌面环境\\n``` bash\\n# 桌面环境\\npacman -S gnome\\n# 登陆管理器\\nsystemctl enable gdm\\n\\n# VirtualBox显卡驱动\\npacman -S virtualbox-guest-utils\\n```\\n### 创建桌面用户\\n``` bash\\nuseradd -m webmis\\npasswd webmis\\n```\\n### 安装字体\\n``` bash\\npacman -S wqy-zenhei wqy-microhei\\n```\\n### 配置网络管理\\n``` bash\\npacman -S networkmanager\\n# NetworkManager添加vpn拨号\\npacman -S networkmanager-pptp\\n\\n# 开机启动\\nsystemctl disable dhcpcd\\nsystemctl enable NetworkManager\\n\\n# 重启\\nreboot\\n```\\n## 二、键盘快捷键\\n``` bash\\n# 系统配置->键盘->自定义快捷键->添加\\n# 终端( gnome-terminal )\\n```\\n\\n## 三、安装输入法\\n``` bash\\npacman -S ibus ibus-sunpinyin\\n```\\n注:然后到“系统设置->区域和语言->输入源”,添加 汉语(SunPinyin) 后注销并重新登录!\\n\\n## 四、美化桌面\\n``` bash\\n# 优化工具\\npacman -S gnome-tweak-tool\\n```\\n字体: 优化工具 > 字体 > \\\"文泉驿微米黑\\\"<br>\\nShell主题: 优化工具 > 扩展 > User themes<br>\\n### Shell主题\\n- 下载地址：https://github.com/webmiss/gnome-shell<br>\\n\\n## 五、常用软件\\n### 浏览器\\n``` bash\\n# Chrome 开源版\\npacman -S chromium\\n# 视频解码\\npacman -S gst-libav\\n```\\n### Yaourt\\n``` bash\\n# 编辑\\nvi /etc/pacman.conf\\n\\t[archlinuxcn]\\n\\tSigLevel = Optional TrustAll\\n\\tServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\\n# 安装\\npacman -Syu yaourt\\n# 编译环境\\npacman -S linux-headers dkms fakeroot\\n# 密钥\\npacman -S archlinux-keyring archlinuxcn-keyring\\n```\\n### 扩展VI和文本编辑器\\n``` bash\\npacman -S vim gedit\\n```\\n### WEB开发工具\\n``` bash\\n# 安装\\nyaourt -S sublime-text-dev\\n# 启动方式\\nvi /usr/bin/sublime\\n\\t#!/bin/sh\\n\\texport SUBLIME_HOME=\\\"/opt/sublime_text_3\\\"\\n\\t$SUBLIME_HOME/sublime_text \\\"$*\\\"\\n# 权限\\nchmod -R 777 /usr/bin/sublime\\n```\\n\\n### VirtualBox虚拟机\\n``` bash\\n# 安装\\npacman -S virtualbox virtualbox-host-dkms virtualbox-guest-iso\\n# 升级内核无法启动虚拟机\\nmodprobe -a vboxnetadp vboxnetflt vboxdrv\\n```\\n\\n### 其它工具\\n``` bash\\n# SVN版本控制\\npacman -S subversion\\n\\n# 多线程下载工具\\npacman -S axel\\n\\n# SSH工具箱 (包括 ssh, scp)\\npacman -S openssh\\n\\n# 远程桌面工具\\npacman -S freerdp remmina\\npacman -S vinagre\\n# 禁用Vino加密\\ngsettings set org.gnome.Vino require-encryption false\\n\\n# 解压软件\\npacman -S p7zip file-roller unrar\\n\\n# 文件系统\\npacman -S ntfs-3g dosfstools\\n\\n# 无线AP\\npacman -S create_ap\\n```\\n\"","module.exports = \"## 安装\\n```bash\\n# Archlinux\\nyaourt -S tesseract\\n# 英文、中文\\nyaourt -S tesseract-data-eng tesseract-data-chi_sim\\n```\\n\\n## 识别\\n```bash\\n# 默认英文\\ntesseract test.png file\\n# 多语言\\ntesseract -l chi_sim+eng test.png file\\n```\\n\\n## 训练\\n```bash\\n# Java软件\\njTessBoxEditor\\n```\""],"sourceRoot":""}